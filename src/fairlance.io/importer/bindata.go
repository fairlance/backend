// Code generated by go-bindata.
// sources:
// templates/websockettest.html
// DO NOT EDIT!

package importer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesWebsockettestHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\x5f\x6f\xdc\xb8\x11\x7f\xf7\xa7\x98\xd3\x19\xd0\x1a\xb1\xa5\xb5\xd3\x6b\x0b\x45\x52\x03\xb4\x01\x9a\xe2\x2e\x31\x9a\x5c\xf3\x10\x18\x07\x5a\xe2\xee\xea\x2c\x89\x02\xc9\xf5\x9e\xe1\xee\x77\x2f\x48\xea\x2f\x49\x69\xe5\x8d\x9d\xea\x21\x91\xc8\xe1\xfc\xe3\xcc\x8f\xc3\xf1\x86\x1b\x5e\xe4\xf1\xc9\x49\xb8\xc1\x28\x8d\x4f\x00\x00\x42\xc6\x1f\x72\xac\xde\xc5\xc3\x6f\x49\xfa\x00\x9c\x06\x25\xdf\x5c\x24\x9b\x2c\x4f\x17\x24\x4d\xcf\xe0\xb1\xa5\x10\xcf\x2d\x4a\xee\xd6\x94\x6c\xcb\xf4\x22\x21\x39\xa1\x01\xfc\x98\x24\xc9\x9b\x96\x66\xaf\x78\xfb\x35\xf3\x93\xd0\x57\x12\x4f\x42\xc1\xbe\x96\x9c\x66\xf7\x90\xa5\x91\x83\xaa\xca\xe9\x14\x10\xc3\xf1\x40\x58\x58\xc5\x21\x82\x0d\xc5\xab\xc8\xf1\x9d\xf8\x9f\xa4\xc0\xa1\x8f\x62\xf8\x2f\x6c\x69\x1e\x84\x59\x59\x6d\x39\xdc\x5f\x14\x24\xc5\x79\xe4\xdc\x22\x86\x7f\xa5\xb9\x13\x87\xbe\x9c\xd1\x78\xf9\x55\x4f\x94\x3f\x90\x15\x6e\xe8\xa4\x1a\x9b\xab\xf8\x67\xb2\xce\xca\xd0\xdf\x5c\x19\x1a\x56\x84\xf2\xe0\xf4\x11\x55\x55\x9e\x25\x88\x67\xa4\xbc\x26\x94\xef\x07\xf2\x24\x69\x8e\x6e\x71\x1e\xbf\x2b\x50\x96\x07\x83\x19\x39\xab\x19\x83\x05\x99\x13\x9b\x74\x0c\xe7\x38\xe9\x11\xaa\x6f\x9c\xbe\x1b\x59\x20\x17\x91\x4a\xe8\x05\xf7\x17\x2b\x42\x6b\xde\x90\x95\x20\x5f\x98\x13\x9f\x3e\xca\xb7\x7d\xe8\x2b\x42\x8b\x58\x5f\xc9\xd1\x7d\xaa\x6c\xb2\xd9\x79\x8d\x18\xdb\x11\x9a\x1e\x36\xb5\xaa\x29\x1d\xff\x09\xe6\x36\xec\xe7\x59\xdc\x88\x10\x46\x37\xef\xd2\xee\xe6\xe3\x99\x4c\xbf\xdd\x72\x2e\xa5\x92\x32\x48\xf2\x2c\xb9\x8b\x9c\x5c\x04\x8e\xd3\xc4\x8f\x22\x30\x62\xe8\x33\xb9\xc3\x65\x10\x72\xfc\x07\x47\x14\x23\x48\x48\xce\x22\xe7\x72\xb9\x74\x80\x92\x1d\x8b\x9c\xd7\x42\x59\x2e\xa8\xf6\xa1\xdf\x90\xc5\xb6\x98\x3e\x10\xc7\x9f\x70\x99\xc2\x07\xc2\xb3\x55\x1d\xac\x56\xa5\xd9\x86\xec\x04\xe5\x80\x30\x82\x1f\x6c\xe3\x4e\xcc\xc9\x7a\x9d\xe3\xd6\x38\x4b\x96\x88\x84\xbf\xbf\x10\xab\xed\xbc\x6d\x81\x5e\xc5\xbf\xfe\xfb\x67\x23\xc9\x99\xb6\x72\x3c\xe1\x41\x4f\xfa\xe6\xe1\xc4\xcb\x52\x83\x71\x89\x77\x7d\xbe\x9e\xa4\x72\xc0\x8f\x05\x3d\x7f\xa8\xb0\x25\x90\xf5\xe0\xb4\xf0\x10\x2b\xa7\x63\x34\x5e\x51\x8c\x73\x54\x26\x98\x8e\x07\x61\x9f\x3e\xc9\x33\x5c\xf2\x19\x01\x0b\x2b\x4a\x0a\x61\xab\x91\x72\xba\xa2\x35\xa1\x34\x57\xbe\x1f\x69\x70\xbb\xf6\x3b\x9b\xdc\xa7\x65\x0f\x8c\xe3\x62\x8e\x7b\x8e\xdd\xd5\xc3\xf6\x95\x3d\xfa\x79\x5a\x53\x8c\xd2\x79\x94\x25\xde\xfd\x56\x60\xc6\xd0\x1a\xcf\x31\x32\x45\x1c\x59\x8c\x9c\x82\x9a\x71\xd3\x05\x33\x91\x6e\x2d\x02\x99\x8c\x6d\x68\x62\x64\xbb\xc8\xff\x11\x30\xd4\x4e\x66\xed\xd3\x8a\x69\xbf\x48\x6f\x64\xe5\x3a\x64\x15\x12\xa2\xb3\x55\xe4\x14\xcd\xe0\x17\x06\x3f\x44\x50\x6e\xf3\xdc\x89\xe1\x02\x3e\x5e\xbf\xfb\x10\xfa\x82\xd0\x06\x54\x16\xb8\xa8\xcf\xf7\x96\x9f\x3c\xdd\x67\xd9\x4d\x2a\x5c\xb6\xba\x7d\xf9\xe4\xc4\x1f\x2b\x3c\x72\x06\x8c\xb1\x48\x72\xc2\xf0\x80\xc7\xdf\xc5\xc8\x98\xef\xec\x25\xc7\x35\x25\xbf\x8b\x88\xee\x50\x4f\x84\x70\xe4\x94\xdb\xe2\x16\xd3\xde\x76\x57\x8a\xf0\x37\x85\x04\xf6\x23\xce\xd8\x01\xb0\x84\xd3\x5f\x97\x3d\xae\xad\xe7\x94\x1d\xf8\xb8\x00\xfa\x4c\x06\x6e\x98\x1d\x41\x4a\x3d\x74\xdb\x2f\x75\xbb\xf1\xae\x1c\xb6\xcc\xc5\x5b\x86\xe9\xfb\x34\xf4\xf9\x66\x9a\xe6\xf3\x43\x85\x0f\x53\x95\xa8\x38\x40\x25\xbc\x72\x80\x22\x2b\x30\xe3\xa8\xa8\xa6\xc9\xea\x8d\x1c\xd3\x5d\x8c\x5a\x0d\x0f\x79\x57\xa5\x9b\x73\xb4\x29\xa7\x0a\xb6\x16\x95\x94\xbe\xb1\x6c\x04\x15\xd5\xea\x34\x3e\x7d\x2c\xd8\xda\x53\x4e\x15\x65\xcc\x88\xe7\x4d\x72\xe1\xdf\x27\x2d\x10\xae\x9e\xbd\x40\x78\x7d\x3e\x71\xb3\x01\xb3\x57\xb4\x7b\x31\xb1\x22\xf4\x39\xb5\x6e\x93\xb9\x1d\xa1\xaf\x05\xf3\x2c\x88\xec\xc3\x6f\x1f\x25\xfb\x07\xd5\x33\x01\x65\x9f\xe5\xd3\xb0\xb2\xaf\xe4\x37\xc0\xa5\xce\xe6\x49\x88\x79\x24\x52\x88\xc2\xe7\x40\xe6\x92\x03\xf3\x07\x31\x44\x1c\xbe\xcf\x82\x0e\xaa\xd6\x78\x41\x60\xe8\x87\xc0\x4c\x6c\x78\xff\x8f\x40\xa5\x4b\x5d\x8a\xee\xcf\x41\x64\x7d\x7f\x90\xcf\x43\x81\xd1\x49\x49\x50\x35\xaa\x72\x22\x21\x4c\xa4\x34\x71\x94\x78\x59\xf2\x77\x82\xeb\xea\xdd\xbc\xc9\x6b\x1e\x9b\x87\x1b\xcf\xaa\xfc\xe2\x1e\xe5\x5b\x7c\x0e\x77\xf8\xe1\xac\x31\x43\xd5\x66\xa7\x8f\x77\xf8\x61\x1f\xc0\xe9\xa3\x24\x79\x26\xe5\x9f\x0c\x7a\x22\xc4\x5e\x1e\xef\xea\xd7\xd0\x57\xcb\x42\x96\xd0\xac\xe2\xc0\x68\x12\x39\x1b\xce\x2b\x16\xf8\xfe\xb6\xac\xee\xd6\x5e\x42\x0a\xff\x7e\x8b\xdf\x5e\x79\x4b\xef\xb5\x9f\x66\x8c\x8b\x4f\xaf\xc8\x4a\xef\x77\x26\x0a\x12\xb5\xf4\x20\x0f\xf4\x47\x46\xd8\xdb\xa5\x77\x79\xe5\x2d\x15\x1b\x39\x32\xce\x48\x29\x7a\x8f\x28\xa0\xaa\x82\x08\x4a\xbc\x83\xff\x6c\xf1\xa2\xeb\xaa\xa5\x38\xcf\x8a\x8c\x63\xca\x02\xf8\xea\x9e\x3e\xba\xe7\xe0\xee\xdd\x9b\xf3\x96\x00\xe7\x01\xb8\x3f\xa2\xaa\x72\xbb\x31\x59\xd5\x1b\xad\x39\xd9\xff\x0a\xc0\xcd\x49\x82\x72\x6f\x85\x32\x2a\x2f\x59\x5e\x46\x7a\x4b\xc5\xe3\xfb\x20\xfb\x12\x83\x41\xd5\x0d\x12\x4a\xac\x32\xca\xf8\x5b\xf1\x29\x8c\x16\x0a\x31\x9c\x90\x32\x1d\x0c\xa9\x3b\x59\x37\x74\x33\x14\xd1\xb6\x59\x04\xc3\x6b\xc4\x98\x58\x73\x79\xf5\xfa\x4f\x3f\xfd\x59\x27\x1d\xb4\xb0\x02\x30\xc4\x5b\x89\xdb\xfe\x12\xd4\xdc\x4d\x5b\x0e\xb1\xaa\x26\x59\xc8\x6e\x4b\x00\xae\x36\xac\xf5\xf9\x02\x70\x5f\x2f\x97\x97\xa6\x7f\xdb\xe2\x68\x30\x31\xb8\x45\xa8\xb5\x3f\x69\x6b\x8d\xaa\x2a\x80\xaf\x37\x23\x24\x5f\x58\x20\x0f\xec\x69\x0e\xa6\x11\x5d\xa1\x1f\xc0\xa5\xa1\x7a\x1f\xbe\x07\x73\xfa\xd1\xae\x0c\xf8\x8b\xc6\xdc\x86\xfe\xa6\x0d\xc3\xca\xc3\x66\x86\x85\x8f\x69\x89\xef\x83\xb8\x1d\x8c\xeb\x6c\x6b\x37\x05\xb0\x42\x39\xc3\x7a\x60\x19\x9d\xa5\x00\x5c\x01\x01\x81\xef\x9b\x19\x15\xd8\x2c\x1f\x5e\x97\xf5\x04\x05\x19\x55\xb6\x51\xf1\x58\xf6\xa2\x5d\x24\x0e\x24\x70\xbb\xae\x89\x6b\x90\xed\xcd\x95\xe2\xd0\x9c\x12\xb6\x9c\x14\xa6\xda\x28\xb3\x04\xd5\x60\x04\x6d\xa5\x2b\x0c\x01\x51\x56\x07\xe0\x88\xff\x1c\xdb\xaa\x5a\x4e\x7f\xe3\x86\xd2\xba\xc2\xb1\xb7\x7a\x87\x78\xb2\xd1\xad\xd2\x00\x64\xb5\x2d\x13\xd9\xb1\x5c\xe0\x7b\x5c\x72\xfd\x4f\x18\x52\xf8\x26\x63\x9e\xea\x83\x47\xea\x63\xc0\xe3\xcd\xc9\x84\xc9\x26\x02\xcd\x15\xd8\xb6\xa1\x35\x99\x0d\xa7\x37\x87\xed\x2f\x30\xdf\x10\x01\xaa\x43\x11\x12\xcd\x67\x29\x22\x8e\x22\x86\xf3\x55\xad\xc3\x1b\x83\x40\x1d\x68\x15\x61\x7c\xd1\x44\xbf\x0b\xaf\x94\xc2\xf5\x11\x03\xaf\xc0\x0d\xda\x41\x0d\x11\xc5\xa4\x2f\xf5\x71\xcf\x47\xa2\xaf\x46\xe7\x6e\x13\xec\x91\xd8\xe1\xf3\xc0\x7b\x26\xf1\xfe\xcc\xba\xde\xe3\x1b\x5c\x2e\x3a\x9f\x50\xcc\x2a\x52\x32\x6c\x73\x4b\xf3\x64\xab\x8e\x4e\x96\x54\x5e\x42\x52\x0c\x51\x04\x57\xcb\xe5\xd4\x42\x50\x91\xb1\xf2\xe4\xb9\x01\x11\x0c\xb9\xc8\x7f\xe4\x94\xe9\xf1\xd6\x8c\xd1\x99\x84\x94\x8c\xe4\xd8\xcb\xc9\x7a\xa1\xfe\xa2\x10\x38\xe7\xad\x84\x33\x3b\xcb\x31\xaf\x24\x22\x85\x7a\x6e\xc1\x94\x12\x3a\x65\x9a\xf4\xbe\xde\x89\x5a\x8c\x48\x1d\x57\x57\xc9\x99\xa5\xab\x96\x71\x5a\x23\x6d\x56\x9c\x8b\x8d\x94\x8a\x5b\x1a\x81\x63\xc6\x52\xcc\xb7\xd4\xb2\x41\xe6\xc6\x1c\xcc\x22\x43\xb4\x2a\xfd\xbe\xe0\xdb\x4f\x24\xb9\xc3\x7c\xe1\xee\xd8\xc1\xcc\x1a\x54\x0b\xf0\x0a\x1c\xdf\x69\xa6\xba\x13\x5c\x8e\xef\xd8\xdf\x64\x70\x45\x2d\x81\xfc\xb4\x78\x5b\x57\xcc\x23\xa5\x70\x2f\x44\x73\x9c\x0a\xfa\xe6\x9a\x8c\xe4\x4e\x8b\xf5\x32\xe4\x2d\x0a\xec\x67\xe9\x54\x77\xb8\xe7\xab\x25\x73\xcf\xa8\x9d\x20\x1a\x99\xf0\x12\x52\x26\x88\x2f\xfe\xf5\xe9\xe3\x07\xaf\x42\x94\xe1\x45\x4f\x6b\x7b\xe6\x4c\x58\x5e\xab\x7b\xd8\xf8\xe9\x83\x45\x6b\x73\xce\x3f\x59\xfa\xda\x08\x36\x5a\xe8\xd7\x56\x1f\x0c\x87\x5f\x5a\xaf\xbb\xee\xe4\x19\xa8\xa3\xc1\x8b\xa5\xa4\x61\x9d\x94\x3c\x06\x3e\xb6\xac\xdb\xe6\xf9\x1c\xe2\x5e\xc4\x7c\xbd\x79\xe2\xc6\x99\xcd\xab\xa7\xf9\xc3\xde\x85\xfb\x5e\x28\xa5\x49\x3f\x06\xa8\xf4\x8b\xc1\x31\x98\x34\x54\xe3\xdb\x60\xc9\xca\xeb\x68\x64\x32\xb8\x1d\x07\x4e\xb6\x7b\x51\x83\x4f\xb6\xb9\x6f\x86\xa8\x31\xbd\xbf\x0d\xa5\x2c\x3d\xd6\x97\x8c\x76\xdb\x0e\x1c\xc6\x00\x33\xa6\xa7\x61\x60\x64\x6f\x9e\x8c\x04\xfa\x25\xf2\xd9\x4b\xf2\xfa\xde\x60\x5c\x55\x65\xd5\x2d\xc6\x47\x8b\x6e\x71\xf3\xfc\xfa\x28\x6f\x7e\x32\x98\xde\x97\x35\x37\xeb\x2f\x1f\xce\xce\xeb\x0b\xda\x18\x89\x98\x85\xfd\x8d\xbd\x72\xaf\xaf\x9e\x33\x84\xd5\xed\xde\x69\x71\x6d\xfb\xd7\x76\x8f\x84\xf6\x06\xda\x4b\x14\x2b\x1b\x19\xed\x53\x97\x5e\xbb\xad\x0f\x15\x7e\xc9\x1b\xc7\x20\x65\xc5\x0e\xfe\x7f\x4a\xfb\x61\x46\xcf\xae\xee\x1b\x85\x8f\x2b\xee\x55\x2e\xed\xcf\x4e\x4e\xba\xc6\xe9\x49\xe8\xcb\x1f\x2b\xfe\x2f\x00\x00\xff\xff\x9f\x6f\x13\x7d\xb3\x28\x00\x00")

func templatesWebsockettestHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesWebsockettestHtml,
		"templates/websockettest.html",
	)
}

func templatesWebsockettestHtml() (*asset, error) {
	bytes, err := templatesWebsockettestHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/websockettest.html", size: 10419, mode: os.FileMode(438), modTime: time.Unix(1491238382, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/websockettest.html": templatesWebsockettestHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"websockettest.html": &bintree{templatesWebsockettestHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

