// Code generated by go-bindata.
// sources:
// templates/websockettest.html
// DO NOT EDIT!

package importer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesWebsockettestHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\xdd\x6f\xdc\xb8\x11\x7f\xf7\x5f\x31\xa7\x33\xb0\x6b\xc4\x96\xd6\x4e\xaf\x2d\x14\x49\x0d\xd0\x06\x68\x8a\xbb\xc4\x68\x72\xcd\x43\x60\x1c\x68\x89\xbb\xab\xb3\x24\x0a\x24\xd7\x7b\x86\xbb\xff\x7b\x41\x52\x9f\x24\xf5\xe1\x8d\x9d\xee\xc3\xdd\x2e\x39\xdf\x9c\xf9\x71\x38\x71\xb0\xe5\x79\x16\x9d\x9c\x04\x5b\x8c\x92\xe8\x04\x00\x20\x60\xfc\x21\xc3\xea\xbb\xf8\xf0\x5b\x92\x3c\x00\xa7\x7e\xc1\xb7\x17\xf1\x36\xcd\x92\x25\x49\x92\x33\x78\x6c\x28\xc4\xe7\x16\xc5\x77\x1b\x4a\x76\x45\x72\x11\x93\x8c\x50\x1f\x7e\x8c\xe3\xf8\x4d\x43\x73\x50\xb2\xbd\x4a\xf8\x49\xe0\x29\x8d\x27\x81\x10\x5f\x69\x4e\xd2\x7b\x48\x93\xd0\x41\x65\xe9\xb4\x06\x88\xe5\xa8\xa7\x2c\x28\xa3\x00\xc1\x96\xe2\x75\xe8\x78\x4e\xf4\x4f\x92\xe3\xc0\x43\x11\xfc\x17\x76\x34\xf3\x83\xb4\x28\x77\x1c\xee\x2f\x72\x92\xe0\x2c\x74\x6e\x11\xc3\xbf\xd2\xcc\x89\x02\x4f\xee\x68\xb2\xbc\xb2\xa3\xca\xeb\xe9\x0a\xb6\x74\xd4\x8c\xed\x55\xf4\x33\xd9\xa4\x45\xe0\x6d\xaf\x0c\x0b\x4b\x42\xb9\x7f\xfa\x88\xca\x32\x4b\x63\xc4\x53\x52\x5c\x13\xca\x0f\x3d\x7d\x92\x34\x43\xb7\x38\x8b\xde\xe5\x28\xcd\xfc\xde\x8e\xdc\xd5\x9c\xc1\x82\xcc\x89\x4c\x3a\x86\x33\x1c\x77\x08\xd5\x6f\x9c\xbc\x1b\x60\x90\x4c\xa4\x14\x76\xc1\xfd\xc5\x9a\xd0\x4a\x36\xa4\x05\xc8\x2f\xcc\x89\x4e\x1f\xe5\xb7\x43\xe0\x29\x42\x8b\x5a\x4f\xe9\xd1\x63\xaa\x7c\xb2\xf9\x79\x8d\x18\xdb\x13\x9a\x4c\xbb\x5a\x56\x94\x8e\xf7\x04\x77\x6b\xf1\xf3\x3c\xae\x55\x08\xa7\xeb\xef\xd2\xef\xfa\xc7\x33\xb9\x7e\xbb\xe3\x5c\x6a\x25\x85\x1f\x67\x69\x7c\x17\x3a\x99\x48\x1c\xa7\xce\x1f\x45\x60\xe4\xd0\x67\x72\x87\x0b\x3f\xe0\xf8\x0f\x8e\x28\x46\x10\x93\x8c\x85\xce\xe5\x6a\xe5\x00\x25\x7b\x16\x3a\xaf\x85\xb1\x5c\x50\x1d\x02\xaf\x26\x8b\x6c\x39\x3d\x91\xc7\x9f\x70\x91\xc0\x07\xc2\xd3\x75\x95\xac\x56\xa3\xd9\x96\xec\x05\x65\x8f\x30\x84\x1f\x6c\xeb\x4e\xc4\xc9\x66\x93\xe1\xc6\x39\x4b\x95\x88\x82\xbf\xbf\x10\xdc\x76\xd9\xb6\x44\x2f\xa3\x5f\xff\xfd\xb3\x51\xe4\x4c\xe3\x1c\x2e\x78\xd0\x8b\xbe\xfe\x70\xe2\xa6\x89\x21\xb8\xc0\xfb\xae\x5c\x57\x52\x39\xe0\x45\x82\x9e\x3f\x94\xd8\x92\xc8\x7a\x72\x5a\x64\x08\xce\xf1\x1c\x8d\xd6\x14\xe3\x0c\x15\x31\xa6\xc3\x49\xd8\xa5\x8f\xb3\x14\x17\x7c\x46\xc2\xc2\x9a\x92\x5c\xf8\x6a\x94\x9c\x6e\x68\x45\x28\xdd\x95\xdf\x8f\x74\xb8\xe1\xfd\xce\x2e\x77\x69\xd9\x03\xe3\x38\x9f\x13\x9e\x63\x4f\x75\xda\xbf\xa2\x43\x3f\xcf\x6a\x8a\x51\x32\x8f\xb2\xc0\xfb\xdf\x72\xcc\x18\xda\xe0\x39\x4e\x26\x88\x23\x8b\x93\x63\x50\x33\xec\xba\x10\x26\xca\xad\x41\x20\x53\xb0\x0d\x4d\x8c\x6a\x17\xf5\x3f\x00\x86\xda\xcd\xac\xfd\xb4\x62\xda\x2f\x32\x1a\x69\xb1\x09\x58\x89\x84\xea\x74\x1d\x3a\x79\xbd\xf8\x85\xc1\x0f\x21\x14\xbb\x2c\x73\x22\xb8\x80\x8f\xd7\xef\x3e\x04\x9e\x20\xb4\x01\x95\x05\x2e\xaa\xfb\xbd\x91\x27\x6f\xf7\x59\x7e\x93\x12\x17\x8d\x6d\x5f\x3e\x39\xd1\xc7\x12\x0f\xdc\x01\x43\x22\xe2\x8c\x30\xdc\x93\xf1\x77\xb1\x32\x14\x3b\x7b\xcb\x71\x4d\xc9\xef\x22\xa3\x5b\xd4\x13\x29\x1c\x3a\xc5\x2e\xbf\xc5\xb4\x73\xdc\xa5\x22\xfc\x4d\x21\x81\xfd\x8a\x33\x4e\x00\x2c\xe9\xf4\xd7\x55\x47\x6a\x13\x39\xe5\x07\x3e\x2e\x81\x3e\x93\x5e\x18\x66\x67\x90\x32\x0f\xdd\x76\x5b\xdd\x76\xbd\x6d\x87\x2d\x7b\xd1\x8e\x61\xfa\x3e\x09\x3c\xbe\x1d\xa7\xf9\xfc\x50\xe2\x69\xaa\x02\xe5\x13\x54\x22\x2a\x13\x14\x69\x8e\x19\x47\x79\x39\x4e\x56\x1d\xe4\x90\xed\x62\xd5\xea\x78\xc0\xdb\x2e\xdd\xdc\xa3\x75\x3b\x95\xb3\x8d\xe8\xa4\xf4\x83\x65\x03\xa8\xa8\xb8\x93\xe8\xf4\x31\x67\x1b\x57\x05\x55\xb4\x31\x03\x91\x37\xc9\x45\x7c\x9f\xc4\x20\x42\x3d\x9b\x41\x44\x7d\x3e\x71\x7d\x00\xb3\x39\x9a\xb3\x18\xe1\x08\x3c\x4e\xad\xc7\x64\x1e\x47\xe0\x69\xc9\x3c\x0b\x22\xbb\xf0\xdb\x45\xc9\xee\x45\xf5\x4c\x40\xd9\x15\xf9\x34\xac\xec\x1a\xf9\x0d\x70\xa9\x8b\x79\x12\x62\x1e\x89\x14\xa2\xf1\x99\xa8\x5c\x32\xb1\x3f\x89\x21\xe2\xf2\x7d\x16\x74\x50\xbd\xc6\x0b\x02\x43\x37\x05\x66\x62\xc3\xfb\x7f\xf8\xaa\x5c\xaa\x56\xf4\x70\x0e\xa2\xea\xbb\x8b\x7c\x1e\x0a\x0c\x6e\x4a\x82\xb2\x36\x95\x13\x09\x61\xa2\xa4\x89\xa3\xd4\xcb\x96\xbf\x55\x5c\x75\xef\xe6\x4b\x5e\x8b\xd8\x3c\xdc\x78\x56\xe3\x97\xf7\x28\xdb\xe1\x73\xb8\xc3\x0f\x67\xb5\x1b\xaa\x37\x3b\x7d\xbc\xc3\x0f\x07\x1f\x4e\x1f\x25\xc9\x33\x19\xff\x64\xd0\x13\x29\xf6\xf2\x78\x57\x7d\x0d\x3c\xc5\x16\xb0\x98\xa6\x25\x07\x46\xe3\xd0\xd9\x72\x5e\x32\xdf\xf3\x76\x45\x79\xb7\x71\x63\x92\x7b\xf7\x3b\xfc\xf6\xca\x5d\xb9\xaf\xbd\x24\x65\x5c\xfc\x74\xf3\xb4\x70\x7f\x67\xa2\x21\x51\xac\x93\x32\xd0\x1f\x29\x61\x6f\x57\xee\xe5\x95\xbb\x52\x62\xe4\xca\xb0\x20\x65\xe8\x3d\xa2\x80\xca\x12\x42\x28\xf0\x1e\xfe\xb3\xc3\xcb\x76\xaa\x96\xe0\x2c\xcd\x53\x8e\x29\xf3\xe1\xeb\xe2\xf4\x71\x71\x0e\x8b\xc3\xe2\xe6\xbc\x21\xc0\x99\x0f\x8b\x1f\x51\x59\x2e\xda\x35\xd9\xd5\x1b\xa3\x39\x39\xff\xf2\x61\x91\x91\x18\x65\xee\x1a\xa5\x54\x3e\xb2\xdc\x94\x74\x58\xc5\xc7\xf3\x40\xce\x25\x7a\x8b\x6a\x1a\x24\x8c\x58\xa7\x94\xf1\xb7\xe2\xa7\x70\x5a\x18\xc4\x70\x4c\x8a\xa4\xb7\xa4\xde\x64\xed\xd2\x4d\x5f\x45\x33\x66\x11\x02\xaf\x11\x63\x82\xe7\xf2\xea\xf5\x9f\x7e\xfa\xb3\x4e\xda\x1b\x61\xf9\x60\xa8\xb7\x12\x37\xf3\x25\xa8\xa4\x9b\xbe\x4c\x89\x2a\x47\x45\xc8\x69\x8b\x0f\x0b\x6d\x59\x9b\xf3\xf9\xb0\x78\xbd\x5a\x5d\x9a\xf1\x6d\x9a\xa3\xde\x46\xef\x15\xa1\x78\x7f\xd2\x78\x8d\xae\xca\x87\xaf\x37\x03\x24\x5f\x98\x2f\x2f\xec\x71\x09\xa6\x13\x6d\xa3\xef\xc3\xa5\x61\x7a\x17\xbe\x7b\x7b\xfa\xd5\xae\x1c\xf8\x8b\x26\xdc\x86\xfe\xa6\x0f\xfd\xce\xc3\xe6\x86\x45\x8e\xe9\x89\xe7\x81\x78\x1d\x0c\xdb\x6c\x1b\x37\xf9\xb0\x46\x19\xc3\x7a\x62\x19\x93\x25\x1f\x16\x02\x02\x7c\xcf\x33\x2b\xca\xb7\x79\xde\x7f\x2e\xeb\x05\x0a\x32\xab\x6c\xab\xe2\x63\x39\x8b\x86\x49\x5c\x48\xb0\x68\xa7\x26\x0b\x83\xec\x60\x72\x8a\x4b\x73\x4c\xd9\x6a\x54\x99\x1a\xa3\xcc\x52\x54\x81\x11\x34\x9d\xae\x70\x04\x44\x5b\xed\x83\x23\xfe\xe7\xd8\xb8\x2a\x3d\xdd\x83\xeb\x6b\x6b\x1b\xc7\x0e\xf7\x1e\xf1\x78\xab\x7b\xa5\x01\xc8\x7a\x57\xc4\x72\x62\xb9\xc4\xf7\xb8\xe0\xfa\x3f\x61\x48\xe5\xdb\x94\xb9\x6a\x0e\x1e\xaa\x1f\x3d\x19\x6f\x4e\x46\x5c\x36\x11\x68\xae\xc2\x66\x0c\xad\xe9\xac\x25\xbd\x99\xf6\x3f\xc7\x7c\x4b\x04\xa8\xf6\x55\x48\x34\x9f\x65\x88\xb8\x8a\x18\xce\xd6\x95\x0d\x6f\x0c\x02\x75\xa1\x95\x84\xf1\x65\x9d\xfd\x0b\x78\xa5\x0c\xae\xae\x18\x78\x05\x0b\xbf\x59\xd4\x10\x51\x6c\x7a\xd2\x9e\xc5\xf9\x40\xf6\x55\xe8\xdc\x1e\x82\x3d\x13\x5b\x7c\xee\x45\xcf\x24\x3e\x9c\x59\xf9\x5d\xbe\xc5\xc5\xb2\x8d\x09\xc5\xac\x24\x05\xc3\xb6\xb0\xd4\x9f\x74\xdd\xd2\xc9\x96\xca\x8d\x49\x82\x21\x0c\xe1\x6a\xb5\x1a\x63\x04\x95\x19\x6b\x57\xde\x1b\x10\x42\x5f\x8a\xfc\x8f\xdc\x32\x23\xde\xb8\x31\xb8\x13\x93\x82\x91\x0c\xbb\x19\xd9\x2c\xd5\xbf\x28\xf8\xce\x79\xa3\xe1\xcc\x2e\x72\x28\x2a\xb1\x28\xa1\x4e\x58\x30\xa5\x84\x8e\xb9\x26\xa3\xaf\x4f\xa2\x96\x03\x5a\x87\xcd\x55\x7a\x66\xd9\xaa\x55\x9c\x36\x48\x9b\x95\xe7\xe2\x20\xa5\xe1\x96\x41\xe0\x90\xb3\x14\xf3\x1d\xb5\x1c\x90\x79\x30\x93\x55\x64\xa8\x56\xad\xdf\x17\x7c\xfb\x89\xc4\x77\x98\x2f\x17\x7b\x36\x59\x59\xbd\x6e\x01\x5e\x81\xe3\x39\xf5\x56\x7b\x83\xcb\xf5\x3d\xfb\x9b\x4c\xae\xb0\x21\x90\x3f\x2d\xd1\xd6\x0d\x73\x49\x21\xc2\x0b\xe1\x9c\xa0\x82\x7e\xb8\xa6\x20\x79\xd2\x82\x5f\xa6\xbc\xc5\x80\xc3\x2c\x9b\xaa\x09\xf7\x7c\xb3\x64\xed\x19\xbd\x13\x84\x03\x1b\x6e\x4c\x8a\x18\xf1\xe5\xbf\x3e\x7d\xfc\xe0\x96\x88\x32\xbc\xec\x58\x6d\xaf\x9c\x11\xcf\x2b\x73\x9f\xc9\x79\x59\x29\xc7\xba\xae\x72\x6d\x97\x65\xf6\x4a\x43\x19\xa6\x7c\xe9\xac\x51\x9a\xe1\xc4\x19\x28\xc7\x11\x4f\xa5\x6d\x8d\x9f\xd3\x2e\x1a\x97\xa7\x36\xca\x9d\x7f\x7b\x76\xed\x10\x62\xb4\xf2\xae\x4e\x76\x32\xe5\x7f\x69\x32\x6b\xb1\x18\x35\x55\x47\xbc\x17\x83\x1d\xc3\x3b\xa9\x79\x08\x60\x6d\xc8\x32\x78\xda\x56\xd7\x05\xcb\xd7\x9b\x29\x98\xb3\x60\x70\x7f\xb2\xf6\xb4\x78\xd8\x27\x8d\xdf\x0b\x89\x35\xed\xc7\x80\xb1\xfe\xf8\x39\x06\x77\xfb\x66\x7c\x1b\xf4\x5a\x65\x1d\x0d\x40\x86\xb4\xe3\x00\xd8\xf6\xf6\xab\x31\xd8\xb6\xf7\xcd\x30\x3c\x64\xf7\x74\x20\x66\xc6\xe1\x18\x2c\x36\xb3\xed\x19\xe1\xd8\x6e\xe1\xf1\x88\x6c\x99\x99\xbf\x64\x65\xdb\xa2\x3c\x8d\x77\x4f\x88\xa8\x41\xff\x2d\xa8\xa7\x0f\x05\x9e\xfd\x89\x55\xbd\x03\x8d\xd1\x83\x7c\x45\x89\xf5\xc1\x47\x14\x27\x3e\x7c\x7d\x94\x2f\x79\x59\x38\xef\x8b\x4a\x9a\xf5\x2f\x59\xce\xce\xab\x07\xf7\x10\x89\xd8\x85\xc3\x8d\xfd\x25\x56\x8d\x12\x66\x28\xab\xc6\xf7\xe3\xea\x9a\x71\xbe\x6d\x2e\x00\xcd\x44\xa1\x03\x0a\x56\x31\xb2\xb2\xc7\x86\x18\x76\x5f\x1f\x4a\xfc\x92\x2f\xc8\x5e\xb1\x8a\x13\xfc\xff\x3c\xd5\xfa\x15\x3d\xfb\xb5\x56\x1b\x7c\xdc\x63\x4d\xd5\xd2\xe1\xec\xe4\xa4\x1d\x84\x9f\x04\x9e\xfc\xe3\xd3\xff\x05\x00\x00\xff\xff\xe6\x54\xd7\x60\x83\x2a\x00\x00")

func templatesWebsockettestHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesWebsockettestHtml,
		"templates/websockettest.html",
	)
}

func templatesWebsockettestHtml() (*asset, error) {
	bytes, err := templatesWebsockettestHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/websockettest.html", size: 10883, mode: os.FileMode(438), modTime: time.Unix(1491754052, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/websockettest.html": templatesWebsockettestHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"websockettest.html": &bintree{templatesWebsockettestHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

