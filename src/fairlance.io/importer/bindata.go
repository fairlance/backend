// Code generated by go-bindata.
// sources:
// templates/messages.html
// DO NOT EDIT!

package importer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesMessagesHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\xdd\x6f\xdb\x38\x12\x7f\xf7\x5f\xc1\xd5\x06\xb0\x83\x4d\x24\x27\xbd\xbd\x3b\xa8\x92\xae\xc0\x5d\x1f\x7a\xd8\x6d\x8b\x6b\xf7\xfa\x50\x14\x0b\x45\xa2\x6d\x6d\x28\x52\x10\xe9\x78\x8d\xc0\xff\xfb\x61\x48\x7d\x92\xd4\x47\xdc\xa6\xa7\x87\x56\x22\x87\xf3\xc5\x99\x1f\x87\x13\x07\x3b\x91\x93\x68\xb1\x08\x76\x38\x4e\xa3\x05\x42\x08\x05\x5c\x1c\x09\x56\xef\xf0\x88\x3b\x96\x1e\x91\x28\x7d\x2a\x76\xd7\xc9\x2e\x23\xe9\x8a\xa5\xe9\x25\x7a\x6c\x28\xe0\xb9\x8b\x93\xfb\x6d\xc9\xf6\x34\xbd\x4e\x18\x61\xa5\x8f\x7e\x4c\x92\xe4\x65\x43\x73\x52\xbc\xbd\x8a\xf9\x22\xf0\x94\xc4\x45\x00\xec\x2b\xc9\x69\xf6\x80\xb2\x34\x74\xe2\xa2\x70\x5a\x05\x60\x38\xea\x09\x0b\x76\xb7\xd1\x2f\x6c\x9b\xd1\xc0\xdb\xdd\x6a\x53\x45\xb4\x2f\x89\x1f\x64\xb4\xd8\x0b\xf4\x70\x9d\xb3\x14\x13\xc9\x91\x64\x49\x2c\x32\x46\x7f\x2b\x89\x13\x05\x9e\x24\xd0\xd6\x7a\x85\x36\x40\xe2\x3b\x4c\xa2\xd7\x79\x9c\x11\xbf\x37\x23\x67\x35\x19\x18\xc8\x9c\xc8\xa4\xe3\x98\xe0\xa4\x43\xa8\xbe\x71\xfa\x7a\x60\x81\x5c\xc4\x0a\x50\x16\x3d\x5c\x6f\x58\x59\xf1\x46\x19\x45\xf2\x85\x3b\xd1\xc5\xa3\x7c\x3b\x05\x9e\x22\xb4\x88\xf5\x94\x1c\xdd\x46\x65\x93\xcd\xce\xf7\x31\xe7\x07\x56\xa6\xd3\xa6\x16\x15\xa5\xe3\x3d\xc1\xdc\x9a\xfd\x3c\x8b\x6b\x11\x60\x74\xfd\x2e\xed\xae\x3f\xbe\x91\xe9\x77\x7b\x21\xa4\x54\x46\xfd\x84\x64\xc9\x7d\xe8\x10\x08\x2d\xa7\x8e\x30\x45\x60\x44\xd9\x47\x76\x8f\xa9\x1f\x08\xfc\xa7\x88\x4b\x1c\xa3\x84\x11\x1e\x3a\x37\xeb\xb5\x83\x4a\x76\xe0\xa1\xf3\x02\x94\x15\x40\x75\x0a\xbc\x9a\x2c\xea\xc5\x58\xe0\xf5\x42\xdb\x1e\xe8\x1f\x30\x4d\xd1\x5b\x26\xb2\x4d\x15\xc0\x56\x9d\xf9\x8e\x1d\x80\xb2\x47\x18\xa2\x1f\x6c\xe3\x4e\x24\xd8\x76\x4b\x70\x63\x9b\x25\x8d\x20\x15\x1f\xae\x61\xb5\x9d\xb7\x2d\xce\x8b\xe8\xb7\xff\xfc\x62\xa4\x1e\xd7\x56\x0e\xe7\x1f\xb2\xe5\x20\x3c\x82\xb9\x59\x6a\x30\xa6\xf8\xd0\xe5\xeb\x4a\x2a\x07\x79\x11\xd0\x8b\x63\x81\x2d\x71\xac\xc7\xa6\x85\x07\xac\x1c\x0f\xd1\x68\x53\x62\x4c\x62\x9a\xe0\x72\x38\x06\xbb\xf4\x09\xc9\x30\x15\x33\xe2\x15\x6d\x4a\x96\x83\xad\x46\xc6\xe9\x8a\x56\x84\xd2\x5c\xf9\x7e\xa6\xc1\xcd\xda\xef\x6c\x72\x97\x96\x1f\xb9\xc0\xf9\x1c\xf7\x9c\xbb\xab\xd3\xf6\xd1\x0e\xfd\x3c\xad\x4b\x1c\xa7\xf3\x28\x29\x3e\xfc\x9e\x63\xce\xe3\x2d\x9e\x63\x64\x1a\x8b\xd8\x62\xe4\x18\xd2\x0c\x9b\x0e\xcc\x20\xdd\x1a\x00\x32\x19\xdb\xd0\xc4\xc8\x76\xc8\xff\x01\x2c\xd4\x40\x6c\x0e\xa6\xfd\x2a\xbd\x91\xd1\x6d\xc0\x8b\x18\x44\x67\x9b\xd0\xc9\xeb\xc1\x4f\x1c\xfd\x10\x22\xba\x27\xc4\x89\xd0\x35\x7a\xf7\xfe\xf5\xdb\xc0\x03\x42\x1b\x50\x59\xe0\xc2\x86\x42\x0d\xf3\x09\xf8\xb1\x38\x83\x15\x98\x36\x0a\x7f\xfa\xe0\x44\xef\x0a\x3c\x70\x2e\x0c\xb1\x48\x08\xe3\xb8\xc7\xe3\x9f\x30\x32\xe4\x50\x7b\x19\xf2\xbe\x64\x7f\x40\x98\xb7\x50\x08\x71\x1d\x3a\x74\x9f\xdf\xe1\xb2\x13\x03\x85\x22\xfc\x5d\xc1\x83\xfd\xd8\x33\xb6\x05\x59\x62\xec\xef\x6b\xc7\xe2\x41\x65\x07\x3e\x2f\xaa\x3e\xb2\x9e\x1b\x66\x87\x95\x52\x2f\xbe\xeb\x56\xa6\xed\x78\x5b\xbd\x5a\xe6\xa2\x3d\xc7\xe5\x9b\x34\xf0\xc4\x6e\x9c\xe6\xe3\xb1\xc0\xd3\x54\x34\xce\x27\xa8\xc0\x2b\x13\x14\x59\x8e\xb9\x88\xf3\x62\x9c\xac\xda\xc8\x21\xdd\x61\xd4\x6a\x78\x20\xda\xa2\xda\x9c\x2b\xeb\x12\x2b\xe7\x5b\xa8\xae\xf4\x8d\xe5\x03\x50\xa9\x56\xa7\xd1\xc5\x63\xce\xb7\xae\x72\x2a\x94\x36\x03\x9e\x37\xc9\xc1\xbf\x4f\x5a\x00\xae\x9e\xbd\x00\xbc\x3e\x9f\xb8\xde\x80\xd9\x2b\x9a\xbd\x18\x59\x11\x78\xa2\xb4\x6e\x93\xb9\x1d\x81\xa7\x05\xf3\x2c\xdc\xec\x62\x72\x17\x3a\xbb\xa7\xd7\x73\xa0\x27\x9d\x5f\xbf\x0d\x00\x68\x57\xf3\xaf\xc0\x50\x9d\xcd\x93\x60\xf4\x4c\xf8\x80\x12\x69\x22\x9d\xd9\xc4\xfc\x24\xb0\xc0\x31\xfd\x4d\x20\x43\x55\x25\xcf\x88\x16\xdd\x50\x98\x09\x18\x6f\xfe\xe5\xab\x1c\xaa\x8a\xd6\xd3\x15\x02\x28\xe8\x0e\x8a\x79\xd0\x30\x38\x29\x09\x8a\x5a\x55\xc1\x24\xae\x41\x9e\x33\x47\x89\x97\x97\x83\x56\x70\x55\xe7\x9f\xac\xd7\x8d\x8e\xc7\xe6\x81\xc9\x37\x55\x7e\xf5\x10\x93\x3d\xbe\x42\xf7\xf8\x78\x59\x9b\xa1\xaa\xb8\x8b\xc7\x7b\x7c\x3c\xf9\xe8\xe2\x51\x92\x7c\x23\xe5\x9f\x8c\x84\x10\x62\xcf\x0f\x82\xd5\x6b\xe0\xa9\x65\x01\x4f\xca\xac\x10\x88\x97\x49\xe8\xec\x84\x28\xb8\xef\x79\x7b\x5a\xdc\x6f\xdd\x84\xe5\xde\xc3\x1e\xbf\xba\x75\xd7\xee\x0b\x2f\xcd\xb8\x80\x4f\x37\xcf\xa8\xfb\x07\x07\xa8\x52\x4b\x27\x79\xc4\x7f\x66\x8c\xbf\x5a\xbb\x37\xb7\xee\x5a\xb1\x91\x23\xc3\x8c\x94\xa2\x0f\x71\x89\xe2\xa2\x40\x21\xa2\xf8\x80\xfe\xbb\xc7\xab\xb6\x33\x96\x62\x92\xe5\x99\xc0\x25\xf7\xd1\xe7\xe5\xc5\xe3\xf2\x0a\x2d\x4f\xcb\x2f\x57\x0d\x01\x26\x3e\x5a\xfe\x18\x17\xc5\xb2\x1d\x93\xf5\xbf\xd6\x5e\xf3\x3c\x24\xbb\x12\xbd\x41\xd5\x0b\x02\xce\x9b\xac\xe4\xe2\x15\x7c\x82\x25\x20\x85\xe3\x84\xd1\xb4\x37\xa4\xae\x64\xed\x50\x47\x0d\x78\x9a\x26\x0b\x30\x7c\x1f\x73\x0e\x6b\x6e\x6e\x5f\xfc\xe5\xe7\xbf\xea\xa4\xbd\x06\x96\x8f\x0c\xf1\x56\xe2\xa6\xbb\x84\x2a\xee\xa6\x2d\x53\xac\x8a\x51\x16\xb2\xd7\xe2\xa3\xa5\x36\xdc\x6f\xfd\xf9\x68\x09\x3b\xef\x7b\x1e\x61\x49\x4c\xdc\x4d\x9c\x95\xf2\x5e\xeb\x66\xcc\x7f\xb1\x5e\xdf\x68\xab\x3d\xaf\xad\x8f\x7a\x13\xdd\x0b\x85\x8f\x96\x07\x3e\xc8\xf2\x67\x8d\xa5\x51\x6f\xf9\xe8\xf3\x97\x01\x92\x4f\xdc\x97\x47\xf9\x38\x07\xd3\xe8\xf6\x0a\xe0\xa3\x1b\xc3\xa2\x2e\x86\xf7\xe6\xb4\x73\x7e\xdc\xae\xbf\x69\x32\x6d\x27\x83\x69\x5a\xbf\x54\xb1\x59\x67\xe1\x63\x1a\xe8\x79\x08\xae\x13\xc3\xa6\xd8\x9a\x56\x3e\xda\xc4\x84\x63\x3d\x3e\x8d\xfe\xd4\x54\x90\x18\x96\xf7\x2f\xdd\x7a\xf2\x22\x19\x9c\xb6\x51\x78\x2c\x5b\xd4\x2c\x82\xc3\x0a\x2d\xdb\xde\xcb\xd2\x20\x3b\x99\x2b\xe1\x40\x1d\x13\xb6\x1e\x15\xa6\x9a\x31\xb3\x04\x55\x40\x85\x9a\xd2\x18\x0c\x41\x50\x87\xfb\xc8\x81\xff\x1c\xdb\xaa\x4a\x4e\x77\xe3\xfa\xd2\x4e\x0b\x8b\xcc\x43\x2c\x92\x9d\x6e\x95\x86\x43\x9b\x3d\x4d\x64\xdf\x73\x85\x1f\x30\x15\xfa\x9f\x28\xa4\xf0\x5d\xc6\x5d\xd5\x4c\x0f\xd5\x47\x8f\xc7\xcb\xc5\x88\xc9\x26\x90\xcd\x15\xd8\xf4\xb2\x35\x99\x35\xa7\x97\xd3\xf6\xe7\x58\xec\x18\x60\x73\x5f\x84\x3c\x14\x66\x29\x02\xc7\x14\xc7\x64\x53\xe9\xf0\xd2\x20\x50\x87\x5d\xc1\xb8\x58\x49\x25\xfb\xb8\x89\x7e\x42\x4b\x4f\x4a\x5b\x5e\x0d\xc4\x56\x05\xe1\xad\x8b\xed\x71\xd6\x82\x78\xcf\x37\x26\xf1\xe9\xd2\xba\xde\x15\x3b\x4c\x57\xad\xc5\x25\xe6\x05\xa3\x1c\xdb\x8c\xae\x9f\x6c\xd3\xd2\xc9\x62\xca\x4d\x58\x8a\x51\x18\xa2\xdb\xf5\x7a\x6c\x21\x52\xfb\xbe\x71\xe5\xe1\x82\x42\xd4\xe7\x22\xff\x91\x53\xa6\x3f\x1b\x33\x06\x67\x12\x46\x39\x23\xd8\x25\x6c\xbb\x52\x7f\x74\xf0\x9d\xab\x46\xc2\xa5\x9d\xe5\x90\x57\x12\x48\x90\x8e\x5b\x70\x59\xb2\x72\xcc\x34\xe9\x7d\xbd\x31\xb5\x1a\x90\x3a\xac\xae\x92\x33\x4b\x57\x2d\x9f\xb4\xbe\xda\xac\x28\x86\x8d\x94\x8a\x5b\x9a\x85\x43\xc6\x96\x58\xec\x4b\xcb\x06\x99\x1b\x33\x99\x23\x86\x68\x55\xf4\x7d\xc2\x77\x1f\x58\x72\x8f\x85\xa6\x9b\xca\x1b\xc7\x73\xd0\x4f\x55\xb0\x37\xc7\xb2\x1c\x3f\xf0\x7f\xc8\xe0\x09\x1b\x02\xf9\x69\xf1\xa6\x2e\xd8\x65\x14\xdc\x87\xc2\x39\x4e\x43\xfa\xe6\x99\x8c\xe4\x4e\xc2\x7a\x19\xd2\x16\x05\x4e\xb3\x74\xaa\xba\xdc\xf3\xd5\x92\xb9\x65\x14\x44\x28\x1c\x98\x70\x13\x46\x93\x58\xac\xfe\xfd\xe1\xdd\x5b\xb7\x88\x4b\x8e\x57\x1d\xad\xed\x99\x31\x62\x79\xa5\xee\xb4\xf1\xe3\xc7\x82\xd6\xd5\x9c\x7f\x2e\x74\xb5\x01\x36\x5a\xf8\x54\x56\x4f\x86\xc3\xaf\x8d\xd7\x97\xcb\xd1\x13\x4c\xcf\xf6\x67\x4b\x39\xc3\x3a\x29\x79\x08\x5c\x6c\x59\xb5\x27\x64\x0e\x71\x27\x62\x3e\x7f\x79\xe2\xc6\x99\x6d\xa9\xa7\xf9\xc3\xde\x74\xfb\x5e\x28\xa4\x49\xb7\x02\x91\x56\xce\x9f\x83\x39\x7d\x31\x5f\x07\x3b\x56\x5e\x67\x23\x8f\xc1\xed\x3c\xf0\xb1\xdd\x5a\x6a\xfc\xb1\xcd\x7d\x35\x04\x0d\xe9\xfd\x75\x28\x64\xe9\x8e\x3e\x67\x34\xdb\x76\x60\x3a\xc7\xcd\x98\x1d\x4f\xf3\x81\xbd\x79\x72\xa6\xeb\x57\xbc\xe7\x29\x98\x2d\x17\x49\x59\x35\xc3\xf8\x60\xd1\x0c\xf7\xc2\xcf\x8f\xf2\x5e\x26\x83\xe9\x0d\xad\x73\xd7\xf6\xeb\x86\xcb\xab\xea\xfa\x34\x44\x02\xb3\xe8\xf4\xc5\x5e\x79\x57\x17\xc3\x19\xc2\xaa\x46\xed\xb8\xb8\xa6\x71\x6b\xbb\xe5\xa1\xe6\x7e\xd8\x49\x14\x2b\x1b\x19\xed\x63\x57\x52\xbb\xad\xc7\x02\x3f\xe7\x8d\xa1\x97\xb2\xb0\x83\xff\x9f\xd2\xbc\x9f\xd1\xb3\xab\xf3\x5a\xe1\xf3\x8a\x73\x95\x4b\xa7\xcb\xc5\xa2\x6d\x79\x2e\x02\x4f\xfe\x54\xf0\x7f\x01\x00\x00\xff\xff\x8e\x2f\xb4\x34\x31\x28\x00\x00")

func templatesMessagesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMessagesHtml,
		"templates/messages.html",
	)
}

func templatesMessagesHtml() (*asset, error) {
	bytes, err := templatesMessagesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/messages.html", size: 10289, mode: os.FileMode(438), modTime: time.Unix(1491082258, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/messages.html": templatesMessagesHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"messages.html": &bintree{templatesMessagesHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

