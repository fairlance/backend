// Code generated by go-bindata.
// sources:
// templates/websockettest.html
// DO NOT EDIT!

package importer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesWebsockettestHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x5a\x6d\x6f\xdb\x36\x10\xfe\xee\x5f\xc1\xa9\x01\xe4\xa0\x89\xe4\xa4\xdb\x50\xa8\x92\x56\x60\x2b\xb0\x0e\x6b\x1b\x20\xdd\xf2\xa1\x08\x06\x5a\xa2\x2d\x35\x14\x29\x90\x74\xd2\x20\xf3\x7f\x1f\x48\x5a\xaf\xa4\x2c\x39\x4d\xe6\x0f\x81\x48\x1e\xef\x9e\x3b\xde\x3d\x7c\x41\xc2\x4c\x14\x38\x9e\xcd\xc2\x0c\xc1\x34\x9e\x01\x00\x40\xc8\xc5\x3d\x46\xfa\x5b\xfe\xc4\x92\xa6\xf7\x40\xb0\x80\x88\xec\x34\xc9\x72\x9c\xce\x69\x9a\x1e\x83\x87\x5a\x42\xfe\x96\x30\xb9\x59\x33\xba\x21\xe9\x69\x42\x31\x65\x01\x78\x91\x24\xc9\x9b\x5a\x66\xab\x75\xfb\x3b\xe5\xb3\xd0\xd7\x16\x67\xa1\x54\xbf\xb3\x9c\xe6\xb7\x20\x4f\x23\x07\x96\xa5\xd3\x00\x90\xdd\x71\xc7\x58\x58\xc6\x21\x04\x19\x43\xab\xc8\xf1\x9d\xf8\x77\x5a\xa0\xd0\x87\x31\xf8\x17\x6c\x18\x0e\xc2\x9c\x94\x1b\x01\x6e\x4f\x0b\x9a\x22\x1c\x39\x4b\xc8\xd1\x5f\x0c\x3b\x71\xe8\xab\x91\x9e\x2e\xbf\x6c\x99\xf2\x3b\xb6\xc2\x8c\xed\x85\x91\x9d\xc7\x7f\xd2\x75\x4e\x42\x3f\x3b\x37\x10\x96\x50\x64\xc1\xd1\x03\x2c\x4b\x9c\x27\x50\xe4\x94\x5c\x40\x91\x6d\x3b\xf6\x94\x28\x86\x4b\x84\xe3\x77\x05\xcc\x71\xd0\x19\x51\xa3\x3d\x67\x90\x14\x73\x62\x53\x8e\x23\x8c\x92\x96\xa0\x6e\xa3\xf4\xdd\xc0\x04\x35\x89\x96\x12\x17\xb8\x3d\x5d\x51\xb6\xd3\x0d\x72\x02\xd4\x07\x77\xe2\xa3\x07\xf5\xb5\x0d\x7d\x2d\x68\x31\xeb\x6b\x3b\xfd\x98\x6a\x9f\x6c\x7e\x5e\x40\xce\xef\x28\x4b\xc7\x5d\x2d\x77\x92\x8e\x7f\x80\xbb\x95\xfa\x69\x1e\x57\x26\xa4\xd3\xd5\xb7\xf2\xbb\x6a\x3c\x91\xeb\xcb\x8d\x10\xca\x2a\x25\x41\x82\xf3\xe4\x26\x72\xb0\x4c\x1c\xa7\xca\x1f\x2d\x60\xe4\xd0\x67\x7a\x83\x48\x10\x0a\xf4\x4d\x40\x86\x20\x48\x28\xe6\x91\x73\xb6\x58\x38\x80\xd1\x3b\x1e\x39\xaf\x24\x58\x21\xa5\xb6\xa1\x5f\x89\xc5\xb6\x9c\x1e\xc9\xe3\x0f\x88\x73\xb8\xce\xc9\x3a\xe4\x25\x94\x48\xf3\x55\xe4\x14\x55\xe7\x15\x07\x3f\x44\x80\x6c\x30\x76\x62\x70\x0a\x3e\x5d\xbc\xfb\x18\xfa\x52\x30\xb6\xa6\xbe\x11\xab\x5d\x2d\xd4\xfa\x54\x25\x98\x11\xb5\x84\x89\x96\x88\xd4\xd8\xae\x2e\x9d\xf8\x53\x89\x06\xe2\x35\xa4\x22\xc1\x94\xa3\x8e\x8e\x5f\x65\xcf\x40\xd0\x07\xca\xf3\x82\xd1\xaf\x32\xe1\xf2\xb4\xe2\x17\x71\x5f\xa2\xc8\x21\x9b\x62\x89\x98\xd3\xca\x5a\x2d\xf8\x4f\x9e\x3a\xc0\x8f\xed\xe9\x60\xac\x80\xea\xed\xad\xf2\xeb\x45\x4b\x6b\x1d\x39\xed\x07\x92\x64\x56\x2f\xf7\xa4\x28\x70\x44\xd2\xcf\xb4\x13\x86\x4b\x44\xd2\xa1\x28\x98\x49\x22\xe0\xb2\xbd\x2d\x34\xfd\xcd\xd6\x61\x19\x8b\x37\x1c\xb1\xf7\x69\xe8\x8b\x6c\xbf\xcc\xe7\xfb\x12\x8d\x4b\x11\x58\x8c\x48\xc9\xa8\x8c\x48\xe4\x05\xe2\x02\x16\xe5\x7e\xb1\xdd\x42\x0e\x61\x97\xbd\x56\xc7\x43\xd1\xec\x68\xe6\x18\xab\xa8\xa7\xe0\x6b\xc9\x3a\xfd\x85\xe5\x03\xc4\xa5\x67\xa7\xf1\xd1\x43\xc1\xd7\x9e\x0e\xaa\x2c\xf9\x81\xc8\x9b\xe2\x32\xbe\x07\x4d\x90\xa1\x9e\x3c\x41\x46\x7d\xba\x70\xb5\x00\x93\x67\xd4\x6b\xb1\x67\x46\xe8\x0b\x66\x5d\x26\x73\x39\x42\xbf\x97\xcc\xfd\x7d\xdf\x4a\x91\x1f\xa9\xc8\x57\xbb\xad\xbc\xcd\x92\xa4\xd5\xff\x44\x44\xd9\x56\x79\x18\x57\xb6\x41\x7e\x07\x5d\xf6\xd5\x1c\xc4\x98\x8f\x64\x8a\x15\xa3\xc5\x48\xe5\xd2\x91\xf1\x51\x0e\x49\xa1\x80\x4f\xc2\x0e\x0c\xc1\xe7\x25\x86\x76\x0a\x4c\xe4\x86\xf7\xbf\x05\xba\x5c\x64\x24\xbd\x3c\xdd\x9e\x00\x59\xf5\xed\x4e\x31\x8d\x05\x06\x07\x95\x40\x59\x41\x15\x54\x51\x98\x2c\x69\xea\x68\xf3\x82\x76\x0c\x0b\x5a\x99\xb4\x24\x7b\x2b\x62\xd3\x78\xe3\x49\xc1\xcf\x6f\x21\xde\xa0\x13\x70\x83\xee\x8f\x2b\x37\x64\x7a\xc8\x13\xd5\x0d\xba\xdf\x06\xe0\xe8\x41\x89\x3c\x11\xf8\x83\x49\x4f\xa6\xd8\xf3\xf3\xdd\xee\x33\xf4\xf5\xb4\x90\x27\x2c\x2f\x05\xe0\x2c\x89\x9c\x4c\x88\x92\x07\xbe\xbf\x21\xe5\xcd\xda\x4b\x68\xe1\xdf\x6e\xd0\xdb\x73\x6f\xe1\xbd\xf2\xd3\x9c\x0b\xd9\xf4\x8a\x9c\x78\x5f\xb9\x3c\x90\xe8\xa9\xa3\x3a\xe0\xb7\x9c\xf2\xb7\x0b\xef\xec\xdc\x5b\x68\x35\xaa\x67\x58\x91\x06\x7a\x0b\x19\x80\x65\x09\x22\x40\xd0\x1d\xf8\x7b\x83\xe6\xcd\x0d\x34\x45\x38\x2f\x72\x81\x18\x0f\xc0\x17\xf7\xe8\xc1\x3d\x01\xee\xd6\xbd\x3e\xa9\x05\x10\x0e\x80\xfb\x02\x96\xa5\xdb\xf4\xc9\xc5\x0e\x8c\x6b\xac\xba\x2b\x06\xc0\xc5\x34\x81\xd8\x5b\xc1\x9c\x61\x48\x12\xe4\xe5\x34\x78\xbd\x78\xbd\x68\xcd\x97\x3f\xdf\x07\xea\x20\xdf\xe9\xd4\xd7\x27\x89\x64\x95\x33\x2e\xde\xca\xa6\xf4\x5c\xa2\xe2\x28\xa1\x24\xed\x74\x25\x38\x47\xa4\x25\x75\xdd\x35\x51\xdf\x4b\xa4\x42\x79\xbd\x91\x73\xce\xce\x5f\xfd\xf8\xd3\xcf\x7d\xd1\xce\x9d\x2f\x00\x86\x79\xab\x70\x7d\x21\x03\x3b\xed\xa6\x2f\x63\xaa\xca\xbd\x2a\xd4\xf5\x24\x00\x6e\xaf\xbb\x77\x31\x0e\x80\xeb\xc3\x32\xf7\x5b\xdd\x66\xac\xeb\xd3\x52\x67\xa0\x73\xad\xa8\xf4\xd4\x9d\x3d\x2d\xc6\x81\x2b\x00\x5f\xae\x07\x44\xae\x78\xa0\xf6\xf2\xfd\x1a\x4c\xd7\x9a\x3b\x40\x00\xce\x0c\x27\xda\xcc\xde\x19\xeb\xef\xfa\x95\x2b\xed\xfe\x9e\x25\xdb\x2e\x61\x3a\xd4\x3d\xa1\xd8\x7c\xb2\xe8\xe9\xba\xb5\x6d\x3e\xef\xa0\x48\xb2\x7e\xe1\xf4\x52\x6f\xb5\x21\x89\xba\x68\xcf\xd1\x2d\x22\xa2\xff\x5a\x24\x7f\x22\xcb\xb9\xa7\x9f\x1c\x22\xdd\xe8\xe8\x78\xd3\x99\xb0\x1d\xcb\xdd\xa9\x06\xeb\x1b\x7f\xcf\x66\xa5\x69\xd0\x6c\xeb\x33\xa1\x45\xb9\x11\x28\x35\x63\x40\xd2\xf6\xc1\x49\x11\x49\x03\xcc\x86\x89\x21\xb1\x61\x44\x43\xd9\x71\x0f\x78\xa9\x9b\xfd\x6c\x00\x2f\x81\xeb\x4b\x13\x6e\x17\xa2\x0d\x61\x81\x44\x46\x25\x63\x74\x2d\x2a\xaa\x9a\x14\x2b\x49\xb6\x1c\xe1\xd5\x2e\x4c\x6f\x0c\x01\x4d\xd9\x25\xe5\x62\xee\x4a\x8a\x0f\x7c\xdf\xad\x90\xf7\x1c\xe9\x15\xba\xf2\x43\x21\x71\x4f\x2c\x96\x41\x43\x3a\x4d\x86\x9c\x58\xc5\x1a\xda\xe9\x2c\xad\x29\xbc\x3d\xb6\xce\xf7\x44\x86\xc8\xbc\x89\x06\x43\xbc\xa4\x84\x23\x5b\x40\xaa\x5f\xbe\x6a\xe4\xd4\x71\xc1\x4b\x68\x8a\x40\x14\x81\xf3\xc5\x62\xdf\x44\xa0\xd3\x76\xe5\x29\x3a\x04\x11\xe8\x6a\x51\x7f\xd4\x90\x19\xeb\xda\x8d\xc1\x91\x84\x12\x4e\x31\xf2\x30\x5d\xcf\xf5\xcb\x52\xe0\x9c\xd4\x16\x8e\xed\x2a\x87\xa2\x92\xc8\xfa\x6e\x85\x05\x31\x46\xd9\x3e\xd7\x54\xf4\xfb\xaf\x2c\xf3\x01\xab\xc3\x70\xb5\x9d\x49\x58\x7b\x74\xd0\x7b\x24\x9a\x94\xe1\x72\x21\x15\x70\xcb\x23\xd7\x90\xb3\xba\x5a\x4d\x84\xe6\xc2\x8c\xd6\x8f\x61\x5a\x1f\x6b\xae\xd0\xf2\x92\x26\x37\x48\xcc\xdd\x3b\xbe\xa7\xa6\x3a\x5b\x1e\x78\x09\x1c\xdf\xa9\x86\x9a\xcd\x47\xf5\xdf\xf1\x5f\x54\x5a\x45\xb5\x80\x6a\x5a\xe2\xdc\x87\xe4\x51\x22\x03\x0b\xa2\x29\xe1\x04\xfd\x65\x35\x15\xa9\x35\x96\xf3\x55\xb2\x5b\x00\x6c\x27\x61\xd2\x2d\x34\x1d\x96\xaa\x3a\x63\xdb\x07\xd1\xc0\x80\x97\x50\x92\x40\x31\xff\xe3\xf2\xd3\x47\xaf\x84\x8c\xa3\x79\x0b\xb5\xbd\x66\xf6\x78\xbe\x83\xfb\x44\xce\xab\x1a\x79\xac\xeb\x3a\xcb\x36\x18\xdb\x6b\x0c\x62\xc4\xc4\xdc\x59\xc1\x1c\xa3\xd4\x19\x28\xc4\x3d\x9e\x2a\x6c\xb5\x9f\xe3\x2e\x1a\x7b\x7a\xef\x81\x72\xfa\xa6\xde\xc6\x21\xd5\xf4\x0a\x7b\xb7\xb2\xa3\x29\xff\xa1\xce\x2c\xd7\xdd\x0b\xb5\xcf\x75\xcf\x46\x38\x86\x77\xca\xf2\x10\xb5\xda\x38\x65\x70\xb5\xad\xae\xcb\x29\x5f\xae\xc7\x08\xce\xc2\xbe\xdd\xf7\xa2\xc3\xe2\x61\x7f\x3f\xfb\xbf\x38\xb8\x67\xfd\x30\x1a\xb6\x9c\xd1\x0e\x66\xdc\x2e\x80\xef\x23\x5d\xab\xae\x47\x53\x8f\xa1\xed\x71\xd4\x6b\xbb\xa3\x54\xec\x6b\x1b\xfb\x6e\x02\x1e\xc2\x3d\x1e\x88\x89\x71\x78\x0c\x0b\x9b\x79\xf6\x84\x44\x6c\x47\xf8\x78\x2e\xb6\xbc\x01\x3f\x67\x4d\xdb\xa2\x3c\xce\x74\x07\x44\xd4\x90\x7f\x2c\xdf\xe9\x81\xed\xf1\x6c\xd6\xbc\x52\xcd\x42\x5f\xfd\x17\xc5\x7f\x01\x00\x00\xff\xff\xf1\xfe\x53\xe7\x4c\x21\x00\x00")

func templatesWebsockettestHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesWebsockettestHtml,
		"templates/websockettest.html",
	)
}

func templatesWebsockettestHtml() (*asset, error) {
	bytes, err := templatesWebsockettestHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/websockettest.html", size: 8524, mode: os.FileMode(420), modTime: time.Unix(1496440901, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/websockettest.html": templatesWebsockettestHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"websockettest.html": &bintree{templatesWebsockettestHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

