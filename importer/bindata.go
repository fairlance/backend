// Code generated by go-bindata.
// sources:
// templates/websockettest.html
// DO NOT EDIT!

package importer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesWebsockettestHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x5a\x5f\x6f\xdb\xb0\x11\x7f\xf7\xa7\xe0\xd4\x00\x72\xd0\x44\x72\xd2\x6d\x28\x54\x49\x2b\xb6\xf5\xa1\xc3\xda\x06\x48\xb7\x3c\x14\xc1\x40\x4b\xb4\xc5\x9a\x12\x05\x92\x76\x1a\x64\xfe\xee\x03\x49\xeb\x2f\x29\x4b\x4e\x93\xf9\x21\x10\xc9\xe3\xdd\xef\x8e\x77\x3f\xfe\x41\xc2\x4c\xe4\x24\x9e\xcd\xc2\x0c\xc1\x34\x9e\x01\x00\x40\xc8\xc5\x23\x41\xfa\x5b\xfe\xc4\x92\xa6\x8f\x40\xb0\xa0\x10\xd9\x65\x92\x61\x92\xce\x69\x9a\x9e\x83\xa7\x5a\x42\xfe\x96\x30\xd9\xac\x19\xdd\x16\xe9\x65\x42\x09\x65\x01\x78\x93\x24\xc9\x87\x5a\x66\xaf\x75\xfb\x07\xe5\xb3\xd0\xd7\x16\x67\xa1\x54\x7f\xb0\x9c\xe2\x1d\xc0\x69\xe4\xc0\xb2\x74\x1a\x00\xb2\x3b\xee\x18\x0b\xcb\x38\x84\x20\x63\x68\x15\x39\x3f\xe1\x0e\xf2\x84\xe1\x52\x04\x19\xe6\x82\xb2\x47\x4f\x62\x99\x9f\x3b\xf1\x5f\x61\xb2\x09\x7d\x18\x83\xff\x82\x2d\x23\x41\x88\x8b\x72\x2b\xc0\xee\x32\xa7\x29\x22\x91\xb3\x84\x1c\xfd\x8b\x11\x27\x0e\x7d\x35\xd2\xb3\xe1\x97\x2d\x08\x7e\x07\x43\x98\xb1\xa3\xf0\xb2\xeb\xf8\x9f\x74\x8d\x8b\xd0\xcf\xae\x0d\xe4\x25\x14\x59\x70\xf6\x04\xcb\x92\xe0\x04\x0a\x4c\x8b\x1b\x28\xb2\x7d\xc7\x9e\x12\x25\x70\x89\x48\xfc\x29\x87\x98\x04\x9d\x11\x35\xda\x73\x06\x49\x31\x27\x36\xe5\x38\x22\x28\x69\x09\xea\x36\x4a\x3f\x0d\x4c\x50\x93\x68\x29\x71\x81\xdd\xe5\x8a\xb2\x83\x6e\x80\x0b\xa0\x3e\xb8\x13\x9f\x3d\xa9\xaf\x7d\xe8\x6b\x41\x8b\x59\x5f\xdb\xe9\xc7\x54\xfb\x64\xf3\xf3\x06\x72\xfe\x40\x59\x3a\xee\x6a\x79\x90\x74\xfc\x13\xdc\xad\xd4\x4f\xf3\xb8\x32\x21\x9d\xae\xbe\x95\xdf\x55\xe3\x85\x5c\x5f\x6e\x85\x50\x56\x69\x11\x24\x04\x27\x9b\xc8\x21\x32\x71\x9c\x2a\x7f\xb4\x80\x91\x43\xdf\xe9\x06\x15\x41\x28\xd0\x2f\x01\x19\x82\x20\xa1\x84\x47\xce\xd5\x62\xe1\x00\x46\x1f\x78\xe4\xbc\x93\x60\x85\x94\xda\x87\x7e\x25\x16\xdb\x72\x7a\x24\x8f\xbf\x20\xce\xe1\x1a\x17\xeb\x90\x97\x50\x22\xc5\xab\xc8\xc9\xab\xce\x3b\x0e\xfe\x10\x81\x62\x4b\x88\x13\x83\x4b\xf0\xed\xe6\xd3\xd7\xd0\x97\x82\xb1\x35\xf5\x8d\x58\x1d\x6a\xa1\xd6\xa7\x2a\xc1\x8c\xa8\x25\x4c\xb4\x44\x45\x8d\xed\xee\xd6\x89\xbf\x95\x68\x20\x5e\x43\x2a\x12\x42\x39\xea\xe8\xf8\x9b\xec\x19\x08\xfa\x40\x79\xde\x30\xfa\x53\x26\x1c\x4e\x2b\x7e\x11\x8f\x25\x8a\x9c\x62\x9b\x2f\x11\x73\x5a\x59\xab\x05\xff\x83\x53\x07\xf8\xb1\x3d\x1d\x8c\x15\x50\xbd\xbd\x55\x7e\xbf\x68\x69\xad\x23\xa7\xfd\x40\x92\xcc\xea\xe5\x9e\x14\x05\x8e\x8a\xf4\x3b\xed\x84\xe1\x16\x15\xe9\x50\x14\xcc\x24\x11\x70\xd9\xde\x2e\x9a\xfe\x66\x4b\xb1\x8c\xc5\x5b\x8e\xd8\xe7\x34\xf4\x45\x76\x5c\xe6\xfb\x63\x89\xc6\xa5\x0a\x98\x8f\x48\xc9\xa8\x8c\x48\xe0\x1c\x71\x01\xf3\xf2\xb8\xd8\x61\x21\x87\xb0\xcb\x5e\xab\xe3\xa1\x68\x76\x3a\x73\x8c\x55\xd4\x93\xf3\xb5\x64\x9d\xfe\xc2\xf2\x01\xe2\xd2\xb3\xd3\xf8\xec\x29\xe7\x6b\x6f\xc5\x68\xee\x61\xc9\x4e\x62\x20\xf4\x16\x79\x99\xb0\xa7\xcd\xa8\x22\x3e\x79\x56\x0a\x05\x9c\x2c\x5c\xaf\xc3\xe4\x19\xf5\x92\x1c\x99\x11\xfa\x82\x59\x57\xcb\x5c\x95\xd0\xef\xe5\x74\x7f\xfb\xb7\x32\xe5\x57\x2a\xf0\xea\xb0\xa3\xb7\xc9\xb2\x68\xf5\xbf\x10\x5f\xb6\x55\x9e\x46\x99\x6d\x90\xbf\xc1\x9a\x7d\x35\x27\x11\xe7\x33\x09\x43\x66\xde\x48\x01\xd3\x91\xf1\x51\x2a\x91\x79\xfa\x22\x24\xc1\x10\x7c\x5d\x7e\x68\xa7\xc0\x44\x8a\xf8\xfc\xf7\xa0\xcb\x12\x17\x40\x92\x6b\x70\x3a\x15\x0c\x0e\x2a\x81\xb2\x82\x2a\xa8\x62\x32\x59\xd2\xd4\xd1\xe6\x05\xed\x18\x16\xb4\x32\x69\x49\xf6\x56\xc4\xa6\xf1\xc6\x8b\x82\x9f\xef\x20\xd9\xa2\x0b\xb0\x41\x8f\xe7\x95\x1b\x32\x3d\xe4\xc1\x6a\x83\x1e\xf7\x01\x38\x7b\x52\x22\x2f\x04\xfe\x64\xd2\x93\x29\xf6\xfa\x7c\x77\xf8\x0c\x7d\x3d\x2d\xd4\x57\x2d\xc0\x59\x12\x39\x99\x10\x25\x0f\x7c\x7f\x5b\x94\x9b\xb5\x97\xd0\xdc\xdf\x6d\xd1\xc7\x6b\x6f\xe1\xbd\xf3\x53\xcc\x85\x6c\x7a\x39\x2e\xbc\x9f\x5c\x9e\x4b\xf4\xd4\x51\x1d\xf0\x17\xa6\xfc\xe3\xc2\xbb\xba\xf6\x16\x5a\x8d\xea\x19\x56\xa4\x81\xee\x20\x03\xb0\x2c\x41\x04\x0a\xf4\x00\xfe\xbd\x45\xf3\xe6\x82\x9a\x22\x82\x73\x2c\x10\xe3\x01\xf8\xe1\x9e\x3d\xb9\x17\xc0\xdd\xbb\xf7\x17\xb5\x00\x22\x01\x70\xdf\xc0\xb2\x74\x9b\x3e\xb9\xd8\x81\x71\xcb\x55\x57\xc6\x00\xb8\x84\x26\x90\x78\x2b\x88\x19\x81\x45\x82\x3c\x4c\x83\xf7\x8b\xf7\x8b\xd6\x7c\xf9\xf3\x7d\xa0\xce\xf3\x9d\x4e\x7d\x8b\x92\x48\x56\x98\x71\xf1\x51\x36\xa5\xe7\x12\x15\x47\x09\x2d\xd2\x4e\x57\x42\x30\x2a\x5a\x52\xf7\x5d\x13\xf5\xf5\x44\x2a\x94\xb7\x1c\x39\xe7\xea\xfa\xdd\x1f\xff\xf4\xe7\xbe\x68\xe7\xea\x17\x00\xc3\xbc\x55\xb8\xbe\x97\x81\x83\x76\xd3\x97\x31\x55\xe5\x51\x15\xea\x96\x12\x00\xb7\xd7\xdd\xbb\x1f\x07\xc0\xf5\x61\x89\xfd\x56\xb7\x19\xeb\xfa\xd0\xd4\x19\xe8\xdc\x2e\x2a\x3d\x75\x67\x4f\x8b\x71\xee\x0a\xc0\x8f\xfb\x01\x91\x3b\x1e\xa8\xbd\xfc\xb8\x06\xd3\xb5\xe6\x2a\x10\x80\x2b\xc3\x89\x36\xb3\x77\xc6\xfa\xbb\x7e\xe5\x4a\xbb\xbf\x67\xc9\xb6\x4b\x98\x0e\x75\x4f\x28\x36\x9f\x2c\x7a\xba\x6e\xed\x9b\xcf\x07\x28\x92\xac\x5f\x38\xbd\xd4\x5b\x6d\x8b\x44\xdd\xb7\xe7\x68\x87\x0a\xd1\x7f\x4c\x92\x3f\x91\x61\xee\xe9\x97\x87\x48\x37\x3a\x3a\x3e\x74\x26\xec\xc7\x72\x77\xaa\xc1\xfa\xe2\xdf\xb3\x59\x69\x1a\x34\xdb\xfa\x4c\x68\x5e\x6e\x05\x4a\xcd\x18\x14\x69\xfb\xe0\xa4\x88\xa4\x01\x66\xc3\xc4\x90\xd8\xb2\x42\x43\x39\x70\x0f\x78\xab\x9b\xfd\x6c\x00\x6f\x81\xeb\x4b\x13\x6e\x17\xa2\x0d\x61\x8e\x44\x46\x25\x63\x74\x2d\x2a\xaa\x9a\x14\x2b\x49\xb6\x1c\x91\xd5\x21\x4c\x1f\x0c\x01\x4d\xd9\x25\xe5\x62\xee\x4a\x8a\x0f\x7c\xdf\xad\x90\xf7\x1c\xe9\x15\xba\xf2\x43\x21\x71\x2f\x2c\x96\x41\x43\x3a\x4d\x86\x5c\x58\xc5\x1a\xda\xe9\x2c\xad\x29\xbc\x3f\xb7\xce\xf7\x44\x86\x8a\x79\x13\x0d\x86\x78\x49\x0b\x8e\x6c\x01\xa9\x7e\x78\xd5\xc8\xa9\xe3\x82\x97\xd0\x14\x81\x28\x02\xd7\x8b\xc5\xb1\x89\x40\xa7\xed\xca\x53\x74\x08\x22\xd0\xd5\xa2\xfe\xa8\x21\x33\xd6\xb5\x1b\x83\x23\x09\x2d\x38\x25\xc8\x23\x74\x3d\xd7\x0f\x4c\x81\x73\x51\x5b\x38\xb7\xab\x1c\x8a\x4a\x22\xeb\xbb\x15\x16\xc4\x18\x65\xc7\x5c\x53\xd1\xef\x3f\xb6\xcc\x07\xac\x0e\xc3\xd5\x76\x26\x61\xed\xd1\x41\xef\xad\x68\x52\x86\xcb\x85\x54\xc0\x2d\x6f\x5d\x43\xce\xea\x6a\x35\x11\x9a\x0b\x33\x5a\x3f\x86\x69\x7d\xac\xb9\x43\xcb\x5b\x9a\x6c\x90\x98\xbb\x0f\xfc\x48\x4d\x75\xb6\x3c\xf0\x16\x38\xbe\x53\x0d\x35\x9b\x8f\xea\x7f\xe0\x7f\x51\x69\x15\xd5\x02\xaa\x69\x89\x73\x1f\x92\x47\x0b\x19\x58\x10\x4d\x09\x27\xe8\x2f\xab\xa9\x48\xad\xb1\x9c\xaf\x92\xdd\x02\x60\x3f\x09\x93\x6e\xa1\xe9\xb0\x54\xd5\x19\xdb\x3e\x88\x06\x06\xbc\x84\x16\x09\x14\xf3\x7f\xdc\x7e\xfb\xea\x95\x90\x71\x34\x6f\xa1\xb6\xd7\xcc\x11\xcf\x0f\x70\x5f\xc8\x79\x55\x23\xcf\x75\x5d\x67\xd9\x96\x10\x7b\x8d\x41\x82\x98\x98\x3b\x2b\x88\x09\x4a\x9d\x81\x42\x3c\xe2\xa9\xc2\x56\xfb\x39\xee\xa2\xb1\xa7\xf7\xde\x29\xa7\x6f\xea\x6d\x1c\x52\x4d\xaf\xb0\x0f\x2b\x3b\x9a\xf2\x5f\xea\xcc\x72\xdd\xa3\x50\xfb\x5c\xf7\x6a\x84\x63\x78\xa7\x2c\x0f\x51\xab\x8d\x53\x06\x57\xdb\xea\xba\x9c\xf2\xe3\x7e\x8c\xe0\x2c\xec\xdb\x7d\x2f\x3a\x2d\x1e\xf6\xf7\xb3\xff\x17\x07\xf7\xac\x9f\x46\xc3\x96\x33\xda\xc9\x8c\xdb\x05\xf0\x7b\xa4\x6b\xd5\xf5\x6c\xea\x31\xb4\x3d\x8f\x7a\x6d\x77\x94\x8a\x7d\x6d\x63\xbf\x4d\xc0\x43\xb8\xc7\x03\x31\x31\x0e\xcf\x61\x61\x33\xcf\x5e\x90\x88\xed\x08\x9f\xcf\xc5\x96\x37\xe0\xd7\xac\x69\x5b\x94\xc7\x99\xee\x84\x88\x1a\xf2\xcf\xe5\x3b\x3d\xb0\x3f\x9f\xcd\x9a\x57\xaa\x59\xe8\xab\x7f\xb2\xf8\x5f\x00\x00\x00\xff\xff\xba\xd3\x45\x89\x6b\x21\x00\x00")

func templatesWebsockettestHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesWebsockettestHtml,
		"templates/websockettest.html",
	)
}

func templatesWebsockettestHtml() (*asset, error) {
	bytes, err := templatesWebsockettestHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/websockettest.html", size: 8555, mode: os.FileMode(420), modTime: time.Unix(1497115568, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/websockettest.html": templatesWebsockettestHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"websockettest.html": &bintree{templatesWebsockettestHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

