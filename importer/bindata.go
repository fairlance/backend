// Code generated by go-bindata.
// sources:
// templates/websockettest.html
// DO NOT EDIT!

package importer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesWebsockettestHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x5a\x5f\x6f\xdb\xb0\x11\x7f\xf7\xa7\xe0\xd4\x00\x72\xd0\x44\x72\xd2\x6d\x28\x54\x49\x2b\xb6\xf5\xa1\xc3\xda\x06\x48\xb7\x3c\x14\xc1\x40\x4b\xb4\xc5\x9a\x12\x05\x92\x76\x1a\x64\xfe\xee\x03\x49\xeb\x2f\x29\x4b\x4e\x93\xf9\x21\x10\xc9\xe3\xdd\xef\x8e\x77\x3f\xfe\x41\xc2\x4c\xe4\x24\x9e\xcd\xc2\x0c\xc1\x34\x9e\x01\x00\x40\xc8\xc5\x23\x41\xfa\x5b\xfe\xc4\x92\xa6\x8f\x40\xb0\xa0\x10\xd9\x65\x92\x61\x92\xce\x69\x9a\x9e\x83\xa7\x5a\x42\xfe\x96\x30\xd9\xac\x19\xdd\x16\xe9\x65\x42\x09\x65\x01\x78\x93\x24\xc9\x87\x5a\x66\xaf\x75\xfb\x07\xe5\xb3\xd0\xd7\x16\x67\xa1\x54\x7f\xb0\x9c\xe2\x1d\xc0\x69\xe4\xc0\xb2\x74\x1a\x00\xb2\x3b\xee\x18\x0b\xcb\x38\x84\x20\x63\x68\x15\x39\x3f\xe1\x0e\xf2\x84\xe1\x52\x04\x19\xe6\x82\xb2\x47\x4f\x62\x99\x9f\x3b\xf1\x5f\x61\xb2\x09\x7d\x18\x83\xff\x82\x2d\x23\x41\x88\x8b\x72\x2b\xc0\xee\x32\xa7\x29\x22\x91\xb3\x84\x1c\xfd\x8b\x11\x27\x0e\x7d\x35\xd2\xb3\xe1\x97\x2d\x08\x7e\x07\x43\x98\xb1\xa3\xf0\xb2\xeb\xf8\x9f\x74\x8d\x8b\xd0\xcf\xae\x0d\xe4\x25\x14\x59\x70\xf6\x04\xcb\x92\xe0\x04\x0a\x4c\x8b\x1b\x28\xb2\x7d\xc7\x9e\x12\x25\x70\x89\x48\xfc\x29\x87\x98\x04\x9d\x11\x35\xda\x73\x06\x49\x31\x27\x36\xe5\x38\x22\x28\x69\x09\xea\x36\x4a\x3f\x0d\x4c\x50\x93\x68\x29\x71\x81\xdd\xe5\x8a\xb2\x83\x6e\x80\x0b\xa0\x3e\xb8\x13\x9f\x3d\xa9\xaf\x7d\xe8\x6b\x41\x8b\x59\x5f\xdb\xe9\xc7\x54\xfb\x64\xf3\xf3\x06\x72\xfe\x40\x59\x3a\xee\x6a\x79\x90\x74\xfc\x13\xdc\xad\xd4\x4f\xf3\xb8\x32\x21\x9d\xae\xbe\x95\xdf\x55\xe3\x85\x5c\x5f\x6e\x85\x50\x56\x69\x11\x24\x04\x27\x9b\xc8\x21\x32\x71\x9c\x2a\x7f\xb4\x80\x91\x43\xdf\xe9\x06\x15\x41\x28\xd0\x2f\x01\x19\x82\x20\xa1\x84\x47\xce\xd5\x62\xe1\x00\x46\x1f\x78\xe4\xbc\x93\x60\x85\x94\xda\x87\x7e\x25\x16\xdb\x72\x7a\x24\x8f\xbf\x20\xce\xe1\x1a\x17\xeb\x90\x97\x50\x22\xc5\xab\xc8\xc9\xab\xce\x3b\x0e\xfe\x10\x81\x62\x4b\x88\x13\x83\x4b\xf0\xed\xe6\xd3\xd7\xd0\x97\x82\xb1\x35\xf5\x8d\x58\x1d\x6a\xa1\xd6\xa7\x2a\xc1\x8c\xa8\x25\x4c\xb4\x44\x45\x8d\xed\xee\xd6\x89\xbf\x95\x68\x20\x5e\x43\x2a\x12\x42\x39\xea\xe8\xf8\x9b\xec\x19\x08\xfa\x40\x79\xde\x30\xfa\x53\x26\x1c\x4e\x2b\x7e\x11\x8f\x25\x8a\x9c\x62\x9b\x2f\x11\x73\x5a\x59\xab\x05\xff\x83\x53\x07\xf8\xb1\x3d\x1d\x8c\x15\x50\xbd\xbd\x55\x7e\xbf\x68\x69\xad\x23\xa7\xfd\x40\x92\xcc\xea\xe5\x9e\x14\x05\x8e\x8a\xf4\x3b\xed\x84\xe1\x16\x15\xe9\x50\x14\xcc\x24\x11\x70\xd9\xde\x2e\x9a\xfe\x66\x4b\xb1\x8c\xc5\x5b\x8e\xd8\xe7\x34\xf4\x45\x76\x5c\xe6\xfb\x63\x89\xc6\xa5\x0a\x98\x8f\x48\xc9\xa8\x8c\x48\xe0\x1c\x71\x01\xf3\xf2\xb8\xd8\x61\x21\x87\xb0\xcb\x5e\xab\xe3\xa1\x68\x76\x3a\x73\x8c\x55\xd4\x93\xf3\xb5\x64\x9d\xfe\xc2\xf2\x01\xe2\xd2\xb3\xd3\xf8\xec\x29\xe7\x6b\x4f\x07\x55\x96\xfc\x40\xe4\x4d\x71\x19\xdf\x93\x26\xc8\x50\x4f\x9e\x20\xa3\x3e\x5d\xb8\x5a\x80\xc9\x33\xea\xb5\x38\x32\x23\xf4\x05\xb3\x2e\x93\xb9\x1c\xa1\xdf\x4b\xe6\xfe\xbe\x6f\xa5\xc8\xaf\x54\xe0\xd5\x61\x2b\x6f\xb3\x64\xd1\xea\x7f\x21\xa2\x6c\xab\x3c\x8d\x2b\xdb\x20\x7f\x83\x2e\xfb\x6a\x4e\x62\xcc\x67\x32\xc5\x8a\xd1\x7c\xa4\x72\xe9\xc8\xf8\x28\x87\xa4\x50\xc0\x17\x61\x07\x86\xe0\xeb\x12\x43\x3b\x05\x26\x72\xc3\xe7\xbf\x07\xba\x5c\x64\x24\x3d\x9c\xee\x2f\x80\xac\xfa\x76\xa7\x98\xc6\x02\x83\x83\x4a\xa0\xac\xa0\x0a\xaa\x28\x4c\x96\x34\x75\xb4\x79\x41\x3b\x86\x05\xad\x4c\x5a\x92\xbd\x15\xb1\x69\xbc\xf1\xa2\xe0\xe7\x3b\x48\xb6\xe8\x02\x6c\xd0\xe3\x79\xe5\x86\x4c\x0f\x79\xa2\xda\xa0\xc7\x7d\x00\xce\x9e\x94\xc8\x0b\x81\x3f\x99\xf4\x64\x8a\xbd\x3e\xdf\x1d\x3e\x43\x5f\x4f\x0b\xf5\x1d\x0b\x70\x96\x44\x4e\x26\x44\xc9\x03\xdf\xdf\x16\xe5\x66\xed\x25\x34\xf7\x77\x5b\xf4\xf1\xda\x5b\x78\xef\xfc\x14\x73\x21\x9b\x5e\x8e\x0b\xef\x27\x97\x07\x12\x3d\x75\x54\x07\xfc\x85\x29\xff\xb8\xf0\xae\xae\xbd\x85\x56\xa3\x7a\x86\x15\x69\xa0\x3b\xc8\x00\x2c\x4b\x10\x81\x02\x3d\x80\x7f\x6f\xd1\xbc\xb9\x99\xa6\x88\xe0\x1c\x0b\xc4\x78\x00\x7e\xb8\x67\x4f\xee\x05\x70\xf7\xee\xfd\x45\x2d\x80\x48\x00\xdc\x37\xb0\x2c\xdd\xa6\x4f\x2e\x76\x60\x5c\x6f\xd5\x5d\x31\x00\x2e\xa1\x09\x24\xde\x0a\x62\x46\x60\x91\x20\x0f\xd3\xe0\xfd\xe2\xfd\xa2\x35\x5f\xfe\x7c\x1f\xa8\x83\x7c\xa7\x53\x5f\x9f\x24\x92\x15\x66\x5c\x7c\x94\x4d\xe9\xb9\x44\xc5\x51\x42\x8b\xb4\xd3\x95\x10\x8c\x8a\x96\xd4\x7d\xd7\x44\x7d\x2f\x91\x0a\xe5\xf5\x46\xce\xb9\xba\x7e\xf7\xc7\x3f\xfd\xb9\x2f\xda\xb9\xf3\x05\xc0\x30\x6f\x15\xae\x2f\x64\xe0\xa0\xdd\xf4\x65\x4c\x55\x79\x54\x85\xba\x9e\x04\xc0\xed\x75\xf7\x2e\xc6\x01\x70\x7d\x58\x62\xbf\xd5\x6d\xc6\xba\x3e\x2d\x75\x06\x3a\xd7\x8a\x4a\x4f\xdd\xd9\xd3\x62\x1c\xb8\x02\xf0\xe3\x7e\x40\xe4\x8e\x07\x6a\x2f\x3f\xae\xc1\x74\xad\xb9\x03\x04\xe0\xca\x70\xa2\xcd\xec\x9d\xb1\xfe\xae\x5f\xb9\xd2\xee\xef\x59\xb2\xed\x12\xa6\x43\xdd\x13\x8a\xcd\x27\x8b\x9e\xae\x5b\xfb\xe6\xf3\x01\x8a\x24\xeb\x17\x4e\x2f\xf5\x56\xdb\x22\x51\x17\xed\x39\xda\xa1\x42\xf4\x5f\x91\xe4\x4f\x64\x98\x7b\xfa\xc9\x21\xd2\x8d\x8e\x8e\x0f\x9d\x09\xfb\xb1\xdc\x9d\x6a\xb0\xbe\xf1\xf7\x6c\x56\x9a\x06\xcd\xb6\x3e\x13\x9a\x97\x5b\x81\x52\x33\x06\x45\xda\x3e\x38\x29\x22\x69\x80\xd9\x30\x31\x24\xb6\xac\xd0\x50\x0e\xdc\x03\xde\xea\x66\x3f\x1b\xc0\x5b\xe0\xfa\xd2\x84\xdb\x85\x68\x43\x98\x23\x91\x51\xc9\x18\x5d\x8b\x8a\xaa\x26\xc5\x4a\x92\x2d\x47\x64\x75\x08\xd3\x07\x43\x40\x53\x76\x49\xb9\x98\xbb\x92\xe2\x03\xdf\x77\x2b\xe4\x3d\x47\x7a\x85\xae\xfc\x50\x48\xdc\x0b\x8b\x65\xd0\x90\x4e\x93\x21\x17\x56\xb1\x86\x76\x3a\x4b\x6b\x0a\xef\xcf\xad\xf3\x3d\x91\xa1\x62\xde\x44\x83\x21\x5e\xd2\x82\x23\x5b\x40\xaa\x1f\x5e\x35\x72\xea\xb8\xe0\x25\x34\x45\x20\x8a\xc0\xf5\x62\x71\x6c\x22\xd0\x69\xbb\xf2\x14\x1d\x82\x08\x74\xb5\xa8\x3f\x6a\xc8\x8c\x75\xed\xc6\xe0\x48\x42\x0b\x4e\x09\xf2\x08\x5d\xcf\xf5\xcb\x52\xe0\x5c\xd4\x16\xce\xed\x2a\x87\xa2\x92\xc8\xfa\x6e\x85\x05\x31\x46\xd9\x31\xd7\x54\xf4\xfb\xaf\x2c\xf3\x01\xab\xc3\x70\xb5\x9d\x49\x58\x7b\x74\xd0\x7b\x24\x9a\x94\xe1\x72\x21\x15\x70\xcb\x23\xd7\x90\xb3\xba\x5a\x4d\x84\xe6\xc2\x8c\xd6\x8f\x61\x5a\x1f\x6b\xee\xd0\xf2\x96\x26\x1b\x24\xe6\xee\x03\x3f\x52\x53\x9d\x2d\x0f\xbc\x05\x8e\xef\x54\x43\xcd\xe6\xa3\xfa\x1f\xf8\x5f\x54\x5a\x45\xb5\x80\x6a\x5a\xe2\xdc\x87\xe4\xd1\x42\x06\x16\x44\x53\xc2\x09\xfa\xcb\x6a\x2a\x52\x6b\x2c\xe7\xab\x64\xb7\x00\xd8\x4f\xc2\xa4\x5b\x68\x3a\x2c\x55\x75\xc6\xb6\x0f\xa2\x81\x01\x2f\xa1\x45\x02\xc5\xfc\x1f\xb7\xdf\xbe\x7a\x25\x64\x1c\xcd\x5b\xa8\xed\x35\x73\xc4\xf3\x03\xdc\x17\x72\x5e\xd5\xc8\x73\x5d\xd7\x59\xb6\x25\xc4\x5e\x63\x90\x20\x26\xe6\xce\x0a\x62\x82\x52\x67\xa0\x10\x8f\x78\xaa\xb0\xd5\x7e\x8e\xbb\x68\xec\xe9\xbd\x07\xca\xe9\x9b\x7a\x1b\x87\x54\xd3\x2b\xec\xc3\xca\x8e\xa6\xfc\x97\x3a\xb3\x5c\xf7\x28\xd4\x3e\xd7\xbd\x1a\xe1\x18\xde\x29\xcb\x43\xd4\x6a\xe3\x94\xc1\xd5\xb6\xba\x2e\xa7\xfc\xb8\x1f\x23\x38\x0b\xfb\x76\xdf\x8b\x4e\x8b\x87\xfd\xfd\xec\xff\xc5\xc1\x3d\xeb\xa7\xd1\xb0\xe5\x8c\x76\x32\xe3\x76\x01\xfc\x1e\xe9\x5a\x75\x3d\x9b\x7a\x0c\x6d\xcf\xa3\x5e\xdb\x1d\xa5\x62\x5f\xdb\xd8\x6f\x13\xf0\x10\xee\xf1\x40\x4c\x8c\xc3\x73\x58\xd8\xcc\xb3\x17\x24\x62\x3b\xc2\xe7\x73\xb1\xe5\x0d\xf8\x35\x6b\xda\x16\xe5\x71\xa6\x3b\x21\xa2\x86\xfc\x73\xf9\x4e\x0f\xec\xcf\x67\xb3\xe6\x95\x6a\x16\xfa\xea\xbf\x2b\xfe\x17\x00\x00\xff\xff\xbc\x07\x14\xd8\x64\x21\x00\x00")

func templatesWebsockettestHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesWebsockettestHtml,
		"templates/websockettest.html",
	)
}

func templatesWebsockettestHtml() (*asset, error) {
	bytes, err := templatesWebsockettestHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/websockettest.html", size: 8548, mode: os.FileMode(420), modTime: time.Unix(1496860059, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/websockettest.html": templatesWebsockettestHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"websockettest.html": &bintree{templatesWebsockettestHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

