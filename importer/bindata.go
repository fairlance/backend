// Code generated by go-bindata.
// sources:
// templates/websockettest.html
// DO NOT EDIT!

package importer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesWebsockettestHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x5a\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\xe0\xd4\x00\x72\xd0\x44\x72\xd2\x6d\x28\x54\x49\x2b\xb0\x15\x58\x87\xb5\x0d\x90\x6e\x79\x28\x82\x81\x96\x68\x4b\x0d\x45\x0a\x24\x9d\x34\xc8\xfc\xdd\x07\x92\xd6\x5f\x52\x96\x9c\x26\xf3\x43\x20\x1d\x8f\x77\xbf\x3b\xde\xfd\x28\x12\x09\x33\x51\xe0\x78\x36\x0b\x33\x04\xd3\x78\x06\x00\x00\x21\x17\xf7\x18\xe9\x67\xf9\x13\x4b\x9a\xde\x03\xc1\x02\x22\xb2\xd3\x24\xcb\x71\x3a\xa7\x69\x7a\x0c\x1e\x6a\x0d\xf9\x5b\xc2\xe4\x66\xcd\xe8\x86\xa4\xa7\x09\xc5\x94\x05\xe0\x45\x92\x24\x6f\x6a\x9d\xad\xb6\xed\xef\x8c\xcf\x42\x5f\x7b\x9c\x85\xd2\xfc\xce\x73\x9a\xdf\x82\x3c\x8d\x1c\x58\x96\x4e\x03\x40\x8a\xe3\x8e\xb3\xb0\x8c\x43\x08\x32\x86\x56\x91\xe3\x3b\xf1\xef\xb4\x40\xa1\x0f\x63\xf0\x2f\xd8\x30\x1c\x84\x39\x29\x37\x02\xdc\x9e\x16\x34\x45\x38\x72\x96\x90\xa3\xbf\x18\x76\xe2\xd0\x57\x23\x3d\x5b\x7e\xd9\x72\xe5\x77\x7c\x85\x19\xdb\x0b\x23\x3b\x8f\xff\xa4\xeb\x9c\x84\x7e\x76\x6e\x20\x2c\xa1\xc8\x82\xa3\x07\x58\x96\x38\x4f\xa0\xc8\x29\xb9\x80\x22\xdb\x76\xfc\x29\x55\x0c\x97\x08\xc7\xef\x0a\x98\xe3\xa0\x33\xa2\x46\x7b\xc1\x20\xa9\xe6\xc4\xa6\x1e\x47\x18\x25\x2d\x45\xfd\x8e\xd2\x77\x03\x13\xd4\x24\x5a\x4a\x5c\xe0\xf6\x74\x45\xd9\xce\x36\xc8\x09\x50\x0f\xdc\x89\x8f\x1e\xd4\xd3\x36\xf4\xb5\xa2\xc5\xad\xaf\xfd\xf4\x73\xaa\x63\xb2\xc5\x79\x01\x39\xbf\xa3\x2c\x1d\x0f\xb5\xdc\x69\x3a\xfe\x01\xe1\x56\xe6\xa7\x45\x5c\xb9\x90\x41\x57\xcf\x2a\xee\xea\xe5\x89\x42\x5f\x6e\x84\x50\x5e\x29\x09\x12\x9c\x27\x37\x91\x83\x65\xe1\x38\x55\xfd\x68\x05\xa3\x86\x3e\xd3\x1b\x44\x82\x50\xa0\x6f\x02\x32\x04\x41\x42\x31\x8f\x9c\xb3\xc5\xc2\x01\x8c\xde\xf1\xc8\x79\x25\xc1\x0a\xa9\xb5\x0d\xfd\x4a\x2d\xb6\xd5\xf4\x48\x1d\x7f\x40\x9c\xc3\x75\x4e\xd6\x21\x2f\xa1\x44\x9a\xaf\x22\xa7\xa8\x84\x57\x1c\xfc\x10\x01\xb2\xc1\xd8\x89\xc1\x29\xf8\x74\xf1\xee\x63\xe8\x4b\xc5\xd8\x5a\xfa\x46\xae\x76\xbd\x50\xdb\x53\x9d\x60\x66\xd4\x92\x26\x5a\x22\x52\x63\xbb\xba\x74\xe2\x4f\x25\x1a\xc8\xd7\x90\x89\x04\x53\x8e\x3a\x36\x7e\x95\x92\x81\xa4\x0f\xb4\xe7\x05\xa3\x5f\x65\xc1\xe5\x69\xc5\x2f\xe2\xbe\x44\x91\x43\x36\xc5\x12\x31\xa7\x55\xb5\x5a\xf1\x9f\x3c\x75\x80\x1f\xdb\xcb\xc1\x58\x01\x25\xed\xad\xf2\xeb\x45\xcb\x6a\x9d\x39\x1d\x07\x92\x64\x56\x2f\xf7\xa4\x2c\x70\x44\xd2\xcf\xb4\x93\x86\x4b\x44\xd2\xa1\x2c\x98\x45\x22\xe0\xb2\xbd\x2d\x34\xf2\x66\xeb\xb0\x8c\xc5\x1b\x8e\xd8\xfb\x34\xf4\x45\xb6\x5f\xe7\xf3\x7d\x89\xc6\xb5\x08\x2c\x46\xb4\x64\x56\x46\x34\xf2\x02\x71\x01\x8b\x72\xbf\xda\x6e\x21\x87\xb0\x4b\xa9\x35\xf0\x50\x34\x3b\x9a\x39\xc6\x2a\xea\x29\xf8\x5a\xb2\x4e\x7f\x61\xf9\x00\x71\xe9\xd9\x69\x7c\xf4\x50\xf0\xb5\xa7\x93\x2a\x5b\x7e\x20\xf3\xa6\xba\xcc\xef\x41\x13\x64\xaa\x27\x4f\x90\x59\x9f\xae\x5c\x2d\xc0\xe4\x19\xf5\x5a\xec\x99\x11\xfa\x82\x59\x97\xc9\x5c\x8e\xd0\xef\x15\x73\x7f\xdf\xb7\x52\xe4\x47\x2a\xf2\xd5\x6e\x2b\x6f\xb3\x24\x69\xc9\x9f\x88\x28\xdb\x26\x0f\xe3\xca\x36\xc8\xef\xa0\xcb\xbe\x99\x83\x18\xf3\x91\x4c\xb1\x62\xb4\x18\xe9\x5c\x3a\x32\x3e\xca\x21\x29\x14\xf0\x49\xd8\x81\x21\xf8\xbc\xc4\xd0\x2e\x81\x89\xdc\xf0\xfe\xb7\x40\xb7\x8b\xcc\xa4\x97\xa7\xdb\x13\x20\xbb\xbe\x2d\x14\xd3\x58\x60\x70\x50\x29\x94\x15\x54\x41\x15\x85\xc9\x96\xa6\x8e\x76\x2f\x68\xc7\xb1\xa0\x95\x4b\x4b\xb1\xb7\x32\x36\x8d\x37\x9e\x14\xfc\xfc\x16\xe2\x0d\x3a\x01\x37\xe8\xfe\xb8\x0a\x43\x96\x87\xfc\xa2\xba\x41\xf7\xdb\x00\x1c\x3d\x28\x95\x27\x02\x7f\x30\xe9\xc9\x12\x7b\x7e\xbe\xdb\x3d\x86\xbe\x9e\x16\xf2\x84\xe5\xa5\x00\x9c\x25\x91\x93\x09\x51\xf2\xc0\xf7\x37\xa4\xbc\x59\x7b\x09\x2d\xfc\xdb\x0d\x7a\x7b\xee\x2d\xbc\x57\x7e\x9a\x73\x21\x5f\xbd\x22\x27\xde\x57\x2e\x3f\x48\xf4\xd4\x51\x1b\xf0\x5b\x4e\xf9\xdb\x85\x77\x76\xee\x2d\xb4\x19\x25\x19\x36\xa4\x81\xde\x42\x06\x60\x59\x82\x08\x10\x74\x07\xfe\xde\xa0\x79\x73\x02\x4d\x11\xce\x8b\x5c\x20\xc6\x03\xf0\xc5\x3d\x7a\x70\x4f\x80\xbb\x75\xaf\x4f\x6a\x05\x84\x03\xe0\xbe\x80\x65\xe9\x36\x32\xb9\xd8\x81\x71\x8c\x55\x67\xc5\x00\xb8\x98\x26\x10\x7b\x2b\x98\x33\x0c\x49\x82\xbc\x9c\x06\xaf\x17\xaf\x17\xad\xf9\xf2\xe7\xfb\x40\x7d\xc8\x77\x84\xfa\xf8\x24\x91\xac\x72\xc6\xc5\x5b\xf9\x2a\x23\x97\xa8\x38\x4a\x28\x49\x3b\xa2\x04\xe7\x88\xb4\xb4\xae\xbb\x2e\xea\x73\x89\x34\x28\x8f\x37\x72\xce\xd9\xf9\xab\x1f\x7f\xfa\xb9\xaf\xda\x39\xf3\x05\xc0\x70\x6f\x55\xae\x0f\x64\x60\x67\xdd\x8c\x65\xcc\x54\xb9\xd7\x84\x3a\x9e\x04\xc0\xed\x89\x7b\x07\xe3\x00\xb8\x3e\x2c\x73\xbf\x25\x36\x73\x5d\x7f\x2d\x75\x06\x3a\xc7\x8a\xca\x4e\x2d\xec\x59\x31\x3e\xb8\x02\xf0\xe5\x7a\x40\xe5\x8a\x07\x6a\x2f\xdf\x6f\xc1\x0c\xad\x39\x03\x04\xe0\xcc\x08\xa2\xcd\xec\x9d\xb1\xfe\xae\x5f\x85\xd2\x96\xf7\x3c\xd9\x76\x09\x33\xa0\xee\x17\x8a\x2d\x26\x8b\x9d\x6e\x58\xdb\xe6\xf1\x0e\x8a\x24\xeb\x37\x4e\xaf\xf4\x56\x1b\x92\xa8\x83\xf6\x1c\xdd\x22\x22\xfa\xb7\x45\xf2\x27\xb2\x9c\x7b\xfa\xca\x21\xd2\x2f\x1d\x1b\x6f\x3a\x13\xb6\x63\xb5\x3b\xd5\x61\x7d\xe2\xef\xf9\xac\x2c\x0d\xba\x6d\x3d\x26\xb4\x28\x37\x02\xa5\x66\x0e\x48\xda\xfe\x70\x52\x44\xd2\x00\xb3\x61\x62\x48\x6c\x18\xd1\x50\x76\xdc\x03\x5e\xea\xd7\x7e\x35\x80\x97\xc0\xf5\xa5\x0b\xb7\x0b\xd1\x86\xb0\x40\x22\xa3\x92\x31\xba\x1e\x15\x55\x4d\xca\x95\x24\x5b\x8e\xf0\x6a\x97\xa6\x37\x86\x82\xa6\xec\x92\x72\x31\x77\x25\xc5\x07\xbe\xef\x56\xc8\x7b\x81\xf4\x1a\x5d\xc5\xa1\x90\xb8\x27\x16\xcf\xa0\x21\x9d\xa6\x42\x4e\xac\x6a\x0d\xed\x74\x96\xd6\x54\xde\x1e\x5b\xe7\x7b\x22\x43\x64\xde\x64\x83\x21\x5e\x52\xc2\x91\x2d\x21\xd5\x2f\x5f\x35\x7a\xea\x73\xc1\x4b\x68\x8a\x40\x14\x81\xf3\xc5\x62\xdf\x44\xa0\xcb\x76\xe5\x29\x3a\x04\x11\xe8\x5a\x51\x7f\xd4\x90\x99\xeb\x3a\x8c\xc1\x91\x84\x12\x4e\x31\xf2\x30\x5d\xcf\xf5\xcd\x52\xe0\x9c\xd4\x1e\x8e\xed\x26\x87\xb2\x92\xc8\xfe\x6e\xa5\x05\x31\x46\xd9\xbe\xd0\x54\xf6\xfb\xb7\x2c\xf3\x01\xaf\xc3\x70\xb5\x9f\x49\x58\x7b\x74\xd0\xbb\x24\x9a\x54\xe1\x72\x21\x15\x70\xcb\x25\xd7\x50\xb0\xba\x5b\x4d\x84\xe6\xc2\x8c\xf6\x8f\xe1\x5a\x7f\xd6\x5c\xa1\xe5\x25\x4d\x6e\x90\x98\xbb\x77\x7c\x4f\x4f\x75\xb6\x3c\xf0\x12\x38\xbe\x53\x0d\x35\x9b\x8f\x92\xdf\xf1\x5f\x54\x59\x45\xb5\x82\x7a\xb5\xe4\xb9\x0f\xc9\xa3\x44\x26\x16\x44\x53\xd2\x09\xfa\xcb\x6a\x1a\x52\x6b\x2c\xe7\xab\x62\xb7\x00\xd8\x4e\xc2\xa4\xdf\xd0\x74\x58\xaa\xeb\x8c\x6d\x1f\x44\x03\x03\x5e\x42\x49\x02\xc5\xfc\x8f\xcb\x4f\x1f\xbd\x12\x32\x8e\xe6\x2d\xd4\xf6\x9e\xd9\x13\xf9\x0e\xee\x13\x05\xaf\x7a\xe4\xb1\xa1\xeb\x2a\xdb\x60\x6c\xef\x31\x88\x11\x13\x73\x67\x05\x73\x8c\x52\x67\xa0\x11\xf7\x44\xaa\xb0\xd5\x71\x8e\x87\x68\xec\xe9\xbd\x0b\xca\xe9\x9b\x7a\x1b\x87\x34\xd3\x6b\xec\xdd\xca\x8e\x96\xfc\x87\xba\xb2\x5c\x77\x2f\xd4\x3e\xd7\x3d\x1b\xe1\x18\xd1\x29\xcf\x43\xd4\x6a\xe3\x94\xc1\xd5\xb6\x86\x2e\xa7\x7c\xb9\x1e\x23\x38\x0b\xfb\x76\xef\x8b\x0e\xcb\x87\xfd\xfe\xec\xff\xe2\xe0\x9e\xf7\xc9\x34\xec\x36\x42\xcb\x97\xda\xc1\xbc\xdb\x85\xf1\x7d\xd4\x6b\xb5\xf5\x68\x02\x32\xac\x3d\x8e\x80\x6d\x27\x95\x8a\x83\x6d\x63\xdf\x4d\xc3\x43\xb8\xc7\x13\x31\x31\x0f\x8f\xe1\x62\xb3\xda\x9e\x90\x8e\xed\x08\x1f\xcf\xc8\x96\x9b\xe0\xe7\xec\x6c\x5b\x96\xc7\xf9\xee\x80\x8c\x1a\xfa\x8f\x65\x3d\x3d\xb0\x3d\x9e\xcd\x9a\xbb\xaa\x59\xe8\xab\xff\xa5\xf8\x2f\x00\x00\xff\xff\x1b\x15\x6d\x40\x52\x21\x00\x00")

func templatesWebsockettestHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesWebsockettestHtml,
		"templates/websockettest.html",
	)
}

func templatesWebsockettestHtml() (*asset, error) {
	bytes, err := templatesWebsockettestHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/websockettest.html", size: 8530, mode: os.FileMode(438), modTime: time.Unix(1496089446, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/websockettest.html": templatesWebsockettestHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"websockettest.html": &bintree{templatesWebsockettestHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

